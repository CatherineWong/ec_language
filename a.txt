CUDA is available?: False
using cuda?: False
/net/storage001.ib.cluster/om2/user/theosech/ec/arc-data/data/training
007bbfb7.json
HIT
HIT
HIT
HIT
HIT
c9e6f938.json
HIT
HIT
HIT
50cb2852.json
HIT
HIT
HIT
fcb5c309.json
HIT
HIT
HIT
97999447.json
HIT
HIT
HIT
f25fbde4.json
HIT
HIT
HIT
72ca375d.json
HIT
HIT
HIT
5521c0d9.json
HIT
HIT
HIT
ce4f8723.json
HIT
HIT
HIT
HIT
base Grammar 0.000000	t0	$_
0.000000	list(tblock) -> tblock	merge_blocks
0.000000	(tblock -> bool) -> list(tblock) -> list(tblock)	filter_blocks
0.000000	(tblock -> tblock) -> list(tblock) -> list(tblock)	map_blocks
0.000000	list(tblock) -> (tblock -> int) -> int -> tblock	nth_of_sorted_object_list
0.000000	tblock -> tcolor -> tblock	fill_color
0.000000	tblock -> list(tcolor) -> tblock	fill_snakewise
0.000000	tblock -> tcolor -> tcolor -> tblock	replace_color
0.000000	tblock -> tblock	remove_black_b
0.000000	tblock -> bool -> tblock	reflect
0.000000	tblock -> int -> tdirection -> bool -> tblock	move
0.000000	tblock -> tdirection -> int -> tblock	duplicate
0.000000	tblock -> int -> tblock	grow
0.000000	tblock -> tblock	box_block
0.000000	tblock -> bool -> bool	is_symmetrical
0.000000	tblock -> bool -> bool	is_rectangle
0.000000	tblock -> int -> bool	has_min_tiles
0.000000	tblock -> bool	touches_any_boundary
0.000000	tblock -> tdirection -> bool	touches_boundary
0.000000	tblock -> bool -> tgridout	to_original_grid_overlay
0.000000	tblock -> bool -> tgridout	to_min_grid
0.000000	tblock -> int	get_height
0.000000	tblock -> int	get_width
0.000000	tblock -> int	get_original_grid_height
0.000000	tblock -> int	get_original_grid_width
0.000000	tblock -> int	get_num_tiles
0.000000	tblock -> int -> tcolor	nth_primary_color
0.000000	tblock -> ttile	block_to_tile
0.000000	tgridin -> bool -> bool -> list(tblock)	find_same_color_blocks
0.000000	tgridin -> bool -> bool -> list(tblock)	find_blocks_by_black_b
0.000000	tgridin -> tcolor -> bool -> bool -> list(tblock)	find_blocks_by_color
0.000000	tgridin -> bool -> list(tsplitblock)	split_grid
0.000000	tgridin -> tblock	grid_to_block
0.000000	tgridin -> list(ttile)	find_tiles_by_black_b
0.000000	ttile -> bool -> bool	is_interior
0.000000	ttile -> tdirection -> (tblock -> bool) -> tblock	extend_towards_until
0.000000	ttile -> tdirection -> tblock	extend_towards_until_edge
0.000000	(ttile -> bool) -> list(ttile) -> list(ttile)	filter_tiles
0.000000	(ttile -> ttile) -> list(ttile) -> list(ttile)	map_tiles
0.000000	list(ttile) -> list(tblock)	tiles_to_blocks
0.000000	list(tsplitblock) -> (tcolor -> tcolor -> tcolor) -> tgridout	overlap_split_blocks
0.000000	list(tsplitblock) -> list(tblock)	to_blocks
0.000000	tcolor -> tcolor -> tcolor -> tlogical -> tcolor	color_logical
0.000000	tcolor -> tcolor -> list(tcolor)	color_pair
0.000000	tlogical	land
0.000000	tlogical	lor
0.000000	tlogical	lxor
0.000000	tdirection	north
0.000000	tdirection	south
0.000000	tdirection	west
0.000000	tdirection	east
0.000000	int	0
0.000000	int	1
0.000000	int	2
0.000000	int	3
0.000000	int	4
0.000000	int	5
0.000000	int	6
0.000000	int	7
0.000000	int	8
0.000000	int	9
0.000000	bool	true
0.000000	bool	false
0.000000	tcolor	invisible
0.000000	tcolor	black
0.000000	tcolor	blue
0.000000	tcolor	red
0.000000	tcolor	green
0.000000	tcolor	yellow
0.000000	tcolor	grey
0.000000	tcolor	pink
0.000000	tcolor	orange
0.000000	tcolor	teal
0.000000	tcolor	maroon
Running EC on node006 @ 2020-03-29 13:24:55.831580 with 30 CPUs and parameters:
	 noConsolidation  =  False
	 iterations  =  3
	 enumerationTimeout  =  28800
	 useRecognitionModel  =  False
	 topk_use_only_likelihood  =  False
	 pseudoCounts  =  30.0
	 aic  =  1.0
	 structurePenalty  =  1.0
	 arity  =  3
	 taskReranker  =  unsolved
	 storeTaskMetrics  =  True
	 rewriteTaskMetrics  =  False
	 maximumFrontier  =  10
	 solver  =  ocaml
	 topK  =  2
	 evaluationTimeout  =  300
	 cuda  =  False

Currently using this much memory: 138670080
Currently using this much memory: 138670080
Using a waking task batch of size: 400
Disabling parallelism on the Python side because we only have one job.
If you are using ocaml, there could still be parallelism.
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 0.000000 <= MDL < 1.500000. Timeout 28800.000000.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 0.)
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 1.500000 <= MDL < 3.000000. Timeout 28776.358219.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 0.)
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 3.000000 <= MDL < 4.500000. Timeout 28756.017015.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 0.)
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 4.500000 <= MDL < 6.000000. Timeout 28729.478336.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 26.)
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 6.000000 <= MDL < 7.500000. Timeout 28699.520036.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 308. |finished| = 4.)
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 7.500000 <= MDL < 9.000000. Timeout 28675.558702.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 308. |finished| = 0.)
(lambda (to_min_grid (remove_black_b (grid_to_block $0)) true))
(lambda (to_min_grid (remove_black_b (grid_to_block $0)) false))
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 9.000000 <= MDL < 10.500000. Timeout 28655.648992.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 308. |finished| = 0.)
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 10.500000 <= MDL < 12.000000. Timeout 28628.021689.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 308. |finished| = 0.)
(lambda (to_min_grid (merge_blocks (find_blocks_by_black_b $0 false false)) false))
(lambda (to_min_grid (box_block (remove_black_b (grid_to_block $0))) false))
(lambda (to_min_grid (remove_black_b (remove_black_b (grid_to_block $0))) true))
(lambda (to_min_grid (remove_black_b (remove_black_b (grid_to_block $0))) false))
(lambda (to_min_grid (remove_black_b (grid_to_block $0)) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (remove_black_b (box_block (grid_to_block $0))) true))
(lambda (to_min_grid (remove_black_b (box_block (grid_to_block $0))) false))
(lambda (to_min_grid (box_block (remove_black_b (grid_to_block $0))) true))
(lambda (to_original_grid_overlay (reflect (grid_to_block $0) false) true))
(lambda (to_original_grid_overlay (reflect (grid_to_block $0) false) false))
(lambda (to_min_grid (reflect (grid_to_block $0) false) true))
(lambda (to_min_grid (reflect (grid_to_block $0) false) false))
(lambda (to_original_grid_overlay (reflect (grid_to_block $0) true) true))
(lambda (to_original_grid_overlay (reflect (grid_to_block $0) true) false))
(lambda (to_min_grid (reflect (grid_to_block $0) true) true))
(lambda (to_min_grid (reflect (grid_to_block $0) true) false))
(lambda (to_min_grid (grow (grid_to_block $0) 2) true))
(lambda (to_min_grid (grow (grid_to_block $0) 2) false))
(lambda (to_min_grid (grow (grid_to_block $0) 1) true))
(lambda (to_min_grid (grow (grid_to_block $0) 1) false))
(python) Launching tgridin -> tgridout (399 tasks) w/ 30 CPUs. 12.000000 <= MDL < 13.500000. Timeout 28172.062501.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 308. |finished| = 0.)
(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) true))
(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) false))
(lambda (to_min_grid (reflect (grid_to_block $0) false) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (box_block (reflect (grid_to_block $0) false)) true))
(lambda (to_min_grid (box_block (reflect (grid_to_block $0) false)) false))
(lambda (to_min_grid (reflect (box_block (grid_to_block $0)) false) true))
(lambda (to_min_grid (reflect (box_block (grid_to_block $0)) false) false))
(lambda (to_min_grid (reflect (grid_to_block $0) (touches_any_boundary (grid_to_block $0))) true))
(lambda (to_min_grid (reflect (grid_to_block $0) (touches_any_boundary (grid_to_block $0))) false))
(lambda (to_min_grid (box_block (reflect (grid_to_block $0) true)) true))
(lambda (to_min_grid (box_block (reflect (grid_to_block $0) true)) false))
(lambda (to_min_grid (reflect (box_block (grid_to_block $0)) true) true))
(lambda (to_min_grid (reflect (box_block (grid_to_block $0)) true) false))
(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) false)) true))
(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) false)) false))
(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) true))
(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) false))
(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) true))
(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) false))
(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) true))
(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false))
(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) true))
(python) Launching tgridin -> tgridout (397 tasks) w/ 30 CPUs. 13.500000 <= MDL < 15.000000. Timeout 26510.342921.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 308. |finished| = 0.)
(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false))
(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 2) false))
(lambda (to_min_grid (remove_black_b (grow (grid_to_block $0) 2)) true))
(lambda (to_min_grid (remove_black_b (grow (grid_to_block $0) 2)) false))
(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 2) true))
(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 2) false))
(lambda (to_min_grid (box_block (grow (grid_to_block $0) 2)) true))
(lambda (to_min_grid (box_block (grow (grid_to_block $0) 2)) false))
(lambda (to_min_grid (grow (grid_to_block $0) 2) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) true))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) true))
(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false))
(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 1) false))
(lambda (to_min_grid (remove_black_b (grow (grid_to_block $0) 1)) false))
(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 1) true))
(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 1) false))
(lambda (to_min_grid (box_block (grow (grid_to_block $0) 1)) true))
(lambda (to_min_grid (box_block (grow (grid_to_block $0) 1)) false))
(lambda (to_min_grid (grow (grid_to_block $0) 1) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) true))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) true))
(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 0) true))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 0) false))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 6) true))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 6) false))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 1) 0) true))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 1) 0) false))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 1) 6) true))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 1) 6) false))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) 0) true))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) 0) false))
(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 1) false))
(lambda (to_min_grid (remove_black_b (grow (grid_to_block $0) 1)) false))
(python) Launching tgridin -> tgridout (395 tasks) w/ 30 CPUs. 15.000000 <= MDL < 16.500000. Timeout 24664.074961.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 308. |finished| = 0.)
(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 red land)))))
(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $1 $0 red land)))))
(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lxor)))))
(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 green lxor)))))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) true) false) true))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) true) false) false))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) true))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) false))
(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) false) true))
(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) false) false))
(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) true))
(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false))
(lambda (to_original_grid_overlay (remove_black_b (reflect (box_block (grid_to_block $0)) true)) true))
(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) (touches_any_boundary (grid_to_block $0)))) true))
(lambda (to_original_grid_overlay (box_block (remove_black_b (reflect (grid_to_block $0) true))) true))
(lambda (to_original_grid_overlay (remove_black_b (box_block (reflect (grid_to_block $0) true))) true))
(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (reflect (grid_to_block $0) true))) true))
(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) true))
(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false))
(lambda (to_original_grid_overlay (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) true))
(lambda (to_original_grid_overlay (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) true) false) true))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) true) false) false))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) true))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) false))
(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) false) true))
(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) false) false))
(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) true))
(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false))
(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (box_block (remove_black_b (reflect (grid_to_block $0) false))) false))
(lambda (to_min_grid (remove_black_b (remove_black_b (reflect (grid_to_block $0) false))) false))
(lambda (to_min_grid (remove_black_b (box_block (reflect (grid_to_block $0) false))) true))
(lambda (to_min_grid (remove_black_b (box_block (reflect (grid_to_block $0) false))) false))
(lambda (to_min_grid (box_block (remove_black_b (reflect (grid_to_block $0) false))) true))
(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lxor)))))
(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 green lxor)))))
(lambda (to_min_grid (duplicate (box_block (grid_to_block $0)) west 1) true))
(lambda (to_min_grid (duplicate (box_block (grid_to_block $0)) west 1) false))
(lambda (to_min_grid (duplicate (box_block (grid_to_block $0)) east 1) true))
(lambda (to_min_grid (duplicate (box_block (grid_to_block $0)) east 1) false))
(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (remove_black_b (replace_color (grid_to_block $0) blue black)) false))
(lambda (to_min_grid (replace_color (box_block (grid_to_block $0)) pink red) false))
(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) pink red)) true))
(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) pink red)) false))
(lambda (to_min_grid (replace_color (remove_black_b (grid_to_block $0)) pink red) true))
(lambda (to_min_grid (replace_color (remove_black_b (grid_to_block $0)) pink red) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (grow (grid_to_block $0) 1) (touches_boundary (grid_to_block $0) north)))
(lambda (to_min_grid (replace_color (box_block (grid_to_block $0)) orange grey) false))
(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) orange grey)) true))
(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) orange grey)) false))
(lambda (to_min_grid (replace_color (remove_black_b (grid_to_block $0)) orange grey) true))
(lambda (to_min_grid (replace_color (remove_black_b (grid_to_block $0)) orange grey) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) (touches_any_boundary (grid_to_block $0))))
(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lor)))))
(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 green lor)))))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 4) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 4) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 5) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 5) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) true))
(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
(lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 pink lor)))))
(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $1 $0 pink lor)))))
(lambda (to_min_grid (remove_black_b (remove_black_b (grow (grid_to_block $0) 1))) false))
(lambda (to_min_grid (remove_black_b (box_block (grow (grid_to_block $0) 1))) false))
(lambda (to_min_grid (remove_black_b (grow (remove_black_b (grid_to_block $0)) 1)) false))
(lambda (to_min_grid (remove_black_b (grow (box_block (grid_to_block $0)) 1)) false))
(lambda (to_min_grid (grow (remove_black_b (remove_black_b (grid_to_block $0))) 1) false))
(lambda (to_min_grid (grow (remove_black_b (box_block (grid_to_block $0))) 1) false))
(lambda (to_min_grid (grow (box_block (remove_black_b (grid_to_block $0))) 1) true))
(lambda (to_min_grid (grow (box_block (remove_black_b (grid_to_block $0))) 1) false))
(lambda (to_original_grid_overlay (remove_black_b (reflect (box_block (grid_to_block $0)) true)) true))
(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) (touches_any_boundary (grid_to_block $0)))) true))
(lambda (to_original_grid_overlay (box_block (remove_black_b (reflect (grid_to_block $0) true))) true))
(lambda (to_original_grid_overlay (remove_black_b (box_block (reflect (grid_to_block $0) true))) true))
(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (reflect (grid_to_block $0) true))) true))
(python) Launching tgridin -> tgridout (388 tasks) w/ 30 CPUs. 16.500000 <= MDL < 18.000000. Timeout 13811.446309.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 308. |finished| = 0.)
(lambda (to_original_grid_overlay (move (remove_black_b (grid_to_block $0)) 1 south false) false))
(lambda (to_original_grid_overlay (move (box_block (grid_to_block $0)) 1 south false) false))
(lambda (to_original_grid_overlay (box_block (move (grid_to_block $0) 1 south false)) false))
(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 west true)) true))
(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 west true)) false))
(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 east true)) true))
(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 east true)) false))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 0) 2) true))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 0) 2) false))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 1) 2) true))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 1) 2) false))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 2) 2) true))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 2) 2) false))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 3) 2) true))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 3) 2) false))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 4) 2) true))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 4) 2) false))
(lambda (to_min_grid (box_block (reflect (reflect (grid_to_block $0) true) false)) true))
(lambda (to_min_grid (box_block (reflect (reflect (grid_to_block $0) true) false)) false))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (reflect (grid_to_block $0) true))) south) true))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (reflect (grid_to_block $0) true))) west) true))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (reflect (grid_to_block $0) true))) east) true))
(lambda (to_min_grid (box_block (reflect (reflect (grid_to_block $0) true) false)) true))
(lambda (to_min_grid (box_block (reflect (reflect (grid_to_block $0) true) false)) false))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 0) 1) true))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 0) 1) false))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) 1) true))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) 1) false))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 2) 1) true))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 2) 1) false))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 3) 1) true))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 3) 1) false))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 4) 1) true))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 4) 1) false))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) true)) (lambda (lambda $0))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) true)) (lambda (lambda $1))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) false)) (lambda (lambda $0))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) false)) (lambda (lambda $1))))
(lambda (to_original_grid_overlay (box_block (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)) false))
(lambda (to_original_grid_overlay (fill_snakewise (merge_blocks (to_blocks (split_grid $0 false))) (color_pair black black)) true))
(lambda (to_min_grid (box_block (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)) true))
(lambda (to_min_grid (box_block (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)) false))
(lambda (to_min_grid (fill_color (remove_black_b (merge_blocks (to_blocks (split_grid $0 false)))) black) true))
(lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (fill_color (remove_black_b (merge_blocks (to_blocks (split_grid $0 false)))) black) true))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (reflect (grid_to_block $0) true))) north) true))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (reflect (grid_to_block $0) true))) south) true))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (reflect (grid_to_block $0) true))) west) true))
We enumerated this many programs, for each task:
	
Generative model enumeration results:
MISS 007bbfb7.json
MISS 00d62c1b.json
MISS 017c7c7b.json
MISS 025d127b.json
MISS 045e512c.json
HIT 0520fde7.json w/ (lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 red land))))) ; log prior = -16.219190 ; log likelihood = 0.000000
MISS 05269061.json
MISS 05f2a901.json
MISS 06df4c85.json
MISS 08ed6ac7.json
MISS 09629e4f.json
MISS 0962bcdd.json
MISS 0a938d79.json
MISS 0b148d64.json
MISS 0ca9ddb6.json
MISS 0d3d703e.json
MISS 0dfd9992.json
MISS 0e206a2e.json
MISS 10fcaaa3.json
MISS 11852cab.json
MISS 1190e5a7.json
MISS 137eaa0f.json
MISS 150deff5.json
MISS 178fcbfb.json
MISS 1a07d186.json
MISS 1b2d62fb.json
MISS 1b60fb0c.json
MISS 1bfc4729.json
MISS 1c786137.json
MISS 1caeab9d.json
HIT 1cf80156.json w/ (lambda (to_min_grid (remove_black_b (grid_to_block $0)) false)) ; log prior = -8.456168 ; log likelihood = 0.000000
MISS 1e0a9b12.json
MISS 1e32b0e9.json
MISS 1f0c79e5.json
MISS 1f642eb9.json
MISS 1f85a75f.json
MISS 1f876c06.json
MISS 1fad071e.json
MISS 2013d3e2.json
MISS 2204b7a8.json
MISS 22168020.json
MISS 22233c11.json
MISS 2281f1f4.json
MISS 228f6490.json
MISS 22eb0ac0.json
MISS 234bbc79.json
MISS 23581191.json
MISS 239be575.json
MISS 23b5c85d.json
MISS 253bf280.json
MISS 25d487eb.json
MISS 25d8a9c8.json
HIT 25ff71a9.json w/ (lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false)) ; log prior = -14.629955 ; log likelihood = 0.000000
MISS 264363fd.json
MISS 272f95fa.json
MISS 27a28665.json
HIT 28bf18c6.json w/ (lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 east true)) false)) ; log prior = -17.269012 ; log likelihood = 0.000000
MISS 28e73c20.json
MISS 29623171.json
MISS 29c11459.json
MISS 29ec7d0e.json
MISS 2bcee788.json
MISS 2bee17df.json
MISS 2c608aff.json
MISS 2dc579da.json
MISS 2dd70a9a.json
MISS 2dee498d.json
MISS 31aa019c.json
MISS 321b1fc6.json
MISS 32597951.json
MISS 3345333e.json
HIT 3428a4f5.json w/ (lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lxor))))) ; log prior = -16.219190 ; log likelihood = 0.000000
MISS 3618c87e.json
MISS 3631a71a.json
MISS 363442ee.json
MISS 36d67576.json
MISS 36fdfd69.json
MISS 3906de3d.json
HIT 39a8645d.json w/ (lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 0) 2) false)) ; log prior = -17.338005 ; log likelihood = 0.000000
MISS 39e1d7f9.json
MISS 3aa6fb7a.json
MISS 3ac3eb23.json
MISS 3af2c5a8.json
MISS 3bd67248.json
MISS 3bdb4ada.json
MISS 3befdf3e.json
HIT 3c9b0459.json w/ (lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false)) ; log prior = -15.254109 ; log likelihood = 0.000000
MISS 3de23699.json
MISS 3e980e27.json
MISS 3eda0437.json
MISS 3f7978a0.json
MISS 40853293.json
MISS 4093f84a.json
MISS 41e4d17e.json
MISS 4258a5f9.json
MISS 4290ef0e.json
MISS 42a50994.json
MISS 4347f46a.json
MISS 444801d8.json
MISS 445eab21.json
MISS 447fd412.json
MISS 44d8ac46.json
MISS 44f52bb0.json
MISS 4522001f.json
MISS 4612dd53.json
MISS 46442a0e.json
MISS 469497ad.json
MISS 46f33fce.json
MISS 47c1f68c.json
MISS 484b58aa.json
MISS 48d8fb45.json
MISS 4938f0c2.json
HIT 496994bd.json w/ (lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) true)) ; log prior = -13.174667 ; log likelihood = 0.000000
MISS 49d1d64f.json
MISS 4be741c5.json
MISS 4c4377d9.json
MISS 4c5c2cf0.json
MISS 50846271.json
MISS 508bd3b6.json
MISS 50cb2852.json
MISS 5117e062.json
MISS 5168d44c.json
MISS 539a4f51.json
MISS 53b68214.json
MISS 543a7ed5.json
MISS 54d82841.json
MISS 54d9e175.json
MISS 5521c0d9.json
HIT 5582e5ca.json w/ (lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false)) ; log prior = -16.368225 ; log likelihood = 0.000000
MISS 5614dbcf.json
MISS 56dc2b01.json
MISS 56ff96f3.json
MISS 57aa92db.json
MISS 5ad4f10b.json
MISS 5bd6f4ac.json
MISS 5c0a986e.json
MISS 5c2c9af4.json
MISS 5daaa586.json
MISS 60b61512.json
HIT 6150a2bd.json w/ (lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false)) ; log prior = -15.254109 ; log likelihood = 0.000000
MISS 623ea044.json
MISS 62c24649.json
MISS 63613498.json
MISS 6430c8c4.json
MISS 6455b5f5.json
MISS 662c240a.json
MISS 67385a82.json
MISS 673ef223.json
MISS 6773b310.json
HIT 67a3c6ac.json w/ (lambda (to_min_grid (reflect (grid_to_block $0) false) false)) ; log prior = -10.535610 ; log likelihood = 0.000000
MISS 67a423a3.json
MISS 67e8384a.json
MISS 681b3aeb.json
MISS 6855a6e4.json
HIT 68b16354.json w/ (lambda (to_min_grid (reflect (grid_to_block $0) true) false)) ; log prior = -10.535610 ; log likelihood = 0.000000
MISS 694f12f3.json
MISS 6a1e5592.json
MISS 6aa20dc0.json
MISS 6b9890af.json
MISS 6c434453.json
MISS 6cdd2623.json
MISS 6cf79266.json
MISS 6d0160f0.json
MISS 6d0aefbc.json
MISS 6d58a25d.json
MISS 6d75e8bb.json
MISS 6e02f1e3.json
MISS 6e19193c.json
MISS 6e82a1ae.json
MISS 6ecd11f4.json
MISS 6f8cd79b.json
MISS 6fa7a44f.json
MISS 72322fa7.json
HIT 72ca375d.json w/ (lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 0) 1) false)) ; log prior = -17.338005 ; log likelihood = 0.000000
MISS 73251a56.json
MISS 7447852a.json
HIT 7468f01a.json w/ (lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) false)) ; log prior = -13.174667 ; log likelihood = 0.000000
MISS 746b3537.json
MISS 74dd1130.json
MISS 75b8110e.json
MISS 760b3cac.json
MISS 776ffc46.json
MISS 77fdfe62.json
MISS 780d0b14.json
MISS 7837ac64.json
MISS 794b24be.json
MISS 7b6016b9.json
HIT 7b7f7511.json w/ (lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) false)) (lambda (lambda $0)))) ; log prior = -17.333550 ; log likelihood = 0.000000
MISS 7c008303.json
MISS 7ddcd7ec.json
MISS 7df24a62.json
MISS 7e0986d6.json
MISS 7f4411dc.json
MISS 7fe24cdd.json
MISS 80af3007.json
MISS 810b9b61.json
MISS 82819916.json
MISS 83302e8f.json
MISS 834ec97d.json
MISS 8403a5d5.json
MISS 846bdb03.json
MISS 855e0971.json
MISS 85c4e7cd.json
MISS 868de0fa.json
MISS 8731374e.json
MISS 88a10436.json
MISS 88a62173.json
MISS 890034e9.json
MISS 8a004b2b.json
MISS 8be77c9e.json
MISS 8d5021e8.json
MISS 8d510a79.json
MISS 8e1813be.json
MISS 8e5a5113.json
MISS 8eb1be9a.json
MISS 8efcae92.json
MISS 8f2ea7aa.json
MISS 90c28cc7.json
MISS 90f3ed37.json
MISS 913fb3ed.json
MISS 91413438.json
MISS 91714a58.json
HIT 9172f3a0.json w/ (lambda (to_min_grid (grow (grid_to_block $0) 2) false)) ; log prior = -11.164219 ; log likelihood = 0.000000
MISS 928ad970.json
MISS 93b581b8.json
MISS 941d9a10.json
MISS 94f9d214.json
MISS 952a094c.json
MISS 9565186b.json
MISS 95990924.json
MISS 963e52fc.json
MISS 97999447.json
MISS 97a05b5b.json
MISS 98cf29f8.json
MISS 995c5fa3.json
HIT 99b1bc43.json w/ (lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lxor))))) ; log prior = -16.219190 ; log likelihood = 0.000000
MISS 99fa7670.json
MISS 9aec4887.json
MISS 9af7a82c.json
MISS 9d9215db.json
MISS 9dfd6313.json
MISS 9ecd008a.json
MISS 9edfc990.json
MISS 9f236235.json
MISS a1570a43.json
MISS a2fd1cf0.json
MISS a3325580.json
MISS a3df8b1e.json
HIT a416b8f3.json w/ (lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false)) ; log prior = -12.550513 ; log likelihood = 0.000000
MISS a48eeaf7.json
MISS a5313dff.json
MISS a5f85a15.json
MISS a61ba2ce.json
MISS a61f2674.json
MISS a64e4611.json
MISS a65b410d.json
MISS a68b268e.json
MISS a699fb00.json
HIT a740d043.json w/ (lambda (to_min_grid (remove_black_b (replace_color (grid_to_block $0) blue black)) false)) ; log prior = -16.225125 ; log likelihood = 0.000000
MISS a78176bb.json
MISS a79310a0.json
MISS a85d4709.json
MISS a87f7484.json
MISS a8c38be5.json
MISS a8d7556c.json
MISS a9f96cdd.json
MISS aabf363d.json
MISS aba27056.json
MISS ac0a08a4.json
MISS ae3edfdc.json
MISS ae4f1146.json
MISS aedd82e4.json
MISS af902bf9.json
MISS b0c4d837.json
MISS b190f7f5.json
HIT b1948b0a.json w/ (lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false)) ; log prior = -13.586067 ; log likelihood = 0.000000
MISS b230c067.json
MISS b27ca6d3.json
MISS b2862040.json
MISS b527c5c6.json
MISS b548a754.json
MISS b60334d2.json
MISS b6afb2da.json
MISS b7249182.json
MISS b775ac94.json
MISS b782dc8a.json
MISS b8825c91.json
MISS b8cdaf2b.json
MISS b91ae062.json
MISS b94a9452.json
MISS b9b7f026.json
MISS ba26e723.json
MISS ba97ae07.json
MISS bb43febb.json
MISS bbc9ae5d.json
MISS bc1d5164.json
MISS bd4472b8.json
MISS bda2d7a6.json
MISS bdad9b1f.json
MISS be94b721.json
MISS beb8660c.json
MISS c0f76784.json
MISS c1d99e64.json
MISS c3e719e8.json
MISS c3f564a4.json
MISS c444b776.json
HIT c59eb873.json w/ (lambda (to_min_grid (grow (grid_to_block $0) 1) false)) ; log prior = -11.164219 ; log likelihood = 0.000000
MISS c8cbb738.json
HIT c8f0f002.json w/ (lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false)) ; log prior = -13.586067 ; log likelihood = 0.000000
MISS c909285e.json
MISS c9e6f938.json
MISS c9f8e694.json
MISS caa06a1f.json
MISS cbded52d.json
MISS cce03e0d.json
MISS cdecee7f.json
MISS ce22a75a.json
HIT ce4f8723.json w/ (lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lor))))) ; log prior = -16.219190 ; log likelihood = 0.000000
MISS ce602527.json
MISS ce9e57f2.json
MISS cf98881b.json
HIT d037b0a7.json w/ (lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) false)) ; log prior = -15.189570 ; log likelihood = 0.000000
MISS d06dbe63.json
MISS d07ae81c.json
MISS d0f5fe59.json
MISS d10ecb37.json
MISS d13f3404.json
MISS d22278a0.json
HIT d23f8c26.json w/ (lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true)) ; log prior = -15.046470 ; log likelihood = 0.000000
MISS d2abd087.json
MISS d364b489.json
MISS d406998b.json
MISS d43fd935.json
MISS d4469b4b.json
MISS d4a91cb9.json
MISS d4f3cd78.json
MISS d511f180.json
MISS d5d6de2d.json
MISS d631b094.json
MISS d687bc17.json
MISS d6ad076f.json
MISS d89b689b.json
MISS d8c310e9.json
MISS d90796e8.json
MISS d9f24cd1.json
HIT d9fac9be.json w/ (lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 0) false)) ; log prior = -14.277734 ; log likelihood = 0.000000
HIT dae9d2b5.json w/ (lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 pink lor))))) ; log prior = -16.219190 ; log likelihood = 0.000000
MISS db3e9e38.json
MISS db93a21d.json
MISS dbc1a6ce.json
MISS dc0a314f.json
MISS dc1df850.json
MISS dc433765.json
MISS ddf7fa4f.json
MISS de1cd16c.json
MISS ded97339.json
MISS e179c5f4.json
MISS e21d9049.json
MISS e26a3af2.json
MISS e3497940.json
MISS e40b9e2f.json
MISS e48d4e1a.json
MISS e5062a87.json
MISS e509e548.json
MISS e50d258f.json
MISS e6721834.json
MISS e73095fd.json
MISS e76a88a6.json
MISS e8593010.json
MISS e8dc4411.json
MISS e9614598.json
MISS e98196ab.json
MISS e9afcf9a.json
MISS ea32f347.json
MISS ea786f4a.json
MISS eb281b96.json
MISS eb5a1d5d.json
MISS ec883f72.json
MISS ecdecbb3.json
MISS ed36ccf7.json
MISS ef135b50.json
MISS f15e1fac.json
MISS f1cefba8.json
HIT f25fbde4.json w/ (lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 1) false)) ; log prior = -13.803276 ; log likelihood = 0.000000
HIT f25ffba3.json w/ (lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) true)) ; log prior = -13.174667 ; log likelihood = 0.000000
MISS f2829549.json
MISS f35d900a.json
MISS f5b8619d.json
MISS f76d97a5.json
MISS f8a8fe49.json
MISS f8b3ba0a.json
MISS f8c80d96.json
MISS f8ff0b80.json
MISS f9012d9b.json
MISS fafffa47.json
MISS fcb5c309.json
MISS fcc82909.json
MISS feca6190.json
MISS ff28f65a.json
MISS ff805c23.json
Hits 29/400 tasks
Average description length of a program solving a task: 14.397433 nats
Generative model average:  4746 sec.	median: 4153 	max: 27540 	standard deviation 6065
Currently using this much memory: 239976448
Frontiers discovered top down: 29
Total frontiers: 29
Currently using this much memory: 239976448
Showing the top 5 programs in each frontier being sent to the compressor:
0520fde7.json
-0.69	(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 red land)))))
-0.69	(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $1 $0 red land)))))

1cf80156.json
-0.93	(lambda (to_min_grid (remove_black_b (grid_to_block $0)) false))
-0.93	(lambda (to_min_grid (remove_black_b (grid_to_block $0)) true))
-3.57	(lambda (to_min_grid (box_block (remove_black_b (grid_to_block $0))) false))
-3.57	(lambda (to_min_grid (box_block (remove_black_b (grid_to_block $0))) true))
-3.57	(lambda (to_min_grid (remove_black_b (box_block (grid_to_block $0))) false))

25ff71a9.json
-0.19	(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false))
-2.83	(lambda (to_original_grid_overlay (box_block (move (grid_to_block $0) 1 south false)) false))
-2.83	(lambda (to_original_grid_overlay (move (box_block (grid_to_block $0)) 1 south false) false))
-2.83	(lambda (to_original_grid_overlay (move (remove_black_b (grid_to_block $0)) 1 south false) false))

28bf18c6.json
-1.39	(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 east true)) false))
-1.39	(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 east true)) true))
-1.39	(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 west true)) false))
-1.39	(lambda (to_min_grid (remove_black_b (move (grid_to_block $0) 3 west true)) true))

3428a4f5.json
-0.69	(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lxor)))))
-0.69	(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 green lxor)))))

39a8645d.json
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 0) 2) false))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 0) 2) true))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 1) 2) false))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 1) 2) true))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 2) 2) false))

3c9b0459.json
-2.10	(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false))
-2.10	(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) true))
-2.10	(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) false) false))
-2.10	(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) false) true))
-2.10	(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) false))

496994bd.json
-0.39	(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) true))
-3.03	(lambda (to_original_grid_overlay (box_block (remove_black_b (reflect (grid_to_block $0) true))) true))
-3.03	(lambda (to_original_grid_overlay (remove_black_b (box_block (reflect (grid_to_block $0) true))) true))
-3.03	(lambda (to_original_grid_overlay (remove_black_b (reflect (box_block (grid_to_block $0)) true)) true))
-3.03	(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) (touches_any_boundary (grid_to_block $0)))) true))

5582e5ca.json
-1.39	(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false))
-1.39	(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) true))
-1.39	(lambda (to_original_grid_overlay (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false))
-1.39	(lambda (to_original_grid_overlay (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) true))

6150a2bd.json
-2.10	(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false))
-2.10	(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) true))
-2.10	(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) false) false))
-2.10	(lambda (to_min_grid (reflect (reflect (grid_to_block $0) true) false) true))
-2.10	(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) false))

67a3c6ac.json
-1.49	(lambda (to_min_grid (reflect (grid_to_block $0) false) false))
-1.49	(lambda (to_min_grid (reflect (grid_to_block $0) false) true))
-1.49	(lambda (to_original_grid_overlay (reflect (grid_to_block $0) false) false))
-1.49	(lambda (to_original_grid_overlay (reflect (grid_to_block $0) false) true))
-4.13	(lambda (to_min_grid (box_block (reflect (grid_to_block $0) false)) false))

68b16354.json
-1.49	(lambda (to_min_grid (reflect (grid_to_block $0) true) false))
-1.49	(lambda (to_min_grid (reflect (grid_to_block $0) true) true))
-1.49	(lambda (to_original_grid_overlay (reflect (grid_to_block $0) true) false))
-1.49	(lambda (to_original_grid_overlay (reflect (grid_to_block $0) true) true))
-4.13	(lambda (to_min_grid (box_block (reflect (grid_to_block $0) true)) false))

72ca375d.json
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 0) 1) false))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 0) 1) true))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) 1) false))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) 1) true))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 2) 1) false))

7468f01a.json
-1.49	(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) false))
-1.49	(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) true))
-1.49	(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) false)) false))
-1.49	(lambda (to_min_grid (remove_black_b (reflect (grid_to_block $0) false)) true))
-4.13	(lambda (to_min_grid (box_block (remove_black_b (reflect (grid_to_block $0) false))) false))

7b7f7511.json
-1.39	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) false)) (lambda (lambda $0))))
-1.39	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) false)) (lambda (lambda $1))))
-1.39	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) true)) (lambda (lambda $0))))
-1.39	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) true)) (lambda (lambda $1))))

9172f3a0.json
-0.94	(lambda (to_min_grid (grow (grid_to_block $0) 2) false))
-0.94	(lambda (to_min_grid (grow (grid_to_block $0) 2) true))
-3.58	(lambda (to_min_grid (box_block (grow (grid_to_block $0) 2)) false))
-3.58	(lambda (to_min_grid (box_block (grow (grid_to_block $0) 2)) true))
-3.58	(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 2) false))

99b1bc43.json
-0.69	(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lxor)))))
-0.69	(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 green lxor)))))

a416b8f3.json
-1.49	(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false))
-1.49	(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) true))
-1.49	(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) false))
-1.49	(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) true))
-4.13	(lambda (to_min_grid (duplicate (box_block (grid_to_block $0)) east 1) false))

a740d043.json
0.00	(lambda (to_min_grid (remove_black_b (replace_color (grid_to_block $0) blue black)) false))

b1948b0a.json
-1.49	(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false))
-1.49	(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) true))
-1.49	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) false))
-1.49	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) true))
-4.13	(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) pink red)) false))

c59eb873.json
-0.92	(lambda (to_min_grid (grow (grid_to_block $0) 1) false))
-0.92	(lambda (to_min_grid (grow (grid_to_block $0) 1) true))
-3.56	(lambda (to_min_grid (box_block (grow (grid_to_block $0) 1)) false))
-3.56	(lambda (to_min_grid (box_block (grow (grid_to_block $0) 1)) true))
-3.56	(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 1) false))

c8f0f002.json
-1.49	(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false))
-1.49	(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) true))
-1.49	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) false))
-1.49	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) true))
-4.13	(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) orange grey)) false))

ce4f8723.json
-0.69	(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $0 $1 green lor)))))
-0.69	(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 green lor)))))

d037b0a7.json
-2.30	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) false))
-2.30	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) true))
-2.30	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) false))
-2.30	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) true))
-2.30	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 4) false))

d23f8c26.json
-0.95	(lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
-0.95	(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
-3.51	(lambda (to_original_grid_overlay (fill_snakewise (merge_blocks (to_blocks (split_grid $0 false))) (color_pair black black)) true))
-3.59	(lambda (to_min_grid (box_block (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)) false))
-3.59	(lambda (to_min_grid (box_block (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)) true))

d9fac9be.json
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 0) false))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 0) true))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 6) false))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 6) true))
-2.30	(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 1) 0) false))

dae9d2b5.json
-0.69	(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $0 $1 pink lor)))))
-0.69	(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $1 $0 pink lor)))))

f25fbde4.json
-0.94	(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 1) false))
-0.94	(lambda (to_min_grid (remove_black_b (grow (grid_to_block $0) 1)) false))
-3.58	(lambda (to_min_grid (grow (box_block (remove_black_b (grid_to_block $0))) 1) false))
-3.58	(lambda (to_min_grid (grow (box_block (remove_black_b (grid_to_block $0))) 1) true))
-3.58	(lambda (to_min_grid (grow (remove_black_b (box_block (grid_to_block $0))) 1) false))

f25ffba3.json
-0.39	(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) true)) true))
-3.03	(lambda (to_original_grid_overlay (box_block (remove_black_b (reflect (grid_to_block $0) true))) true))
-3.03	(lambda (to_original_grid_overlay (remove_black_b (box_block (reflect (grid_to_block $0) true))) true))
-3.03	(lambda (to_original_grid_overlay (remove_black_b (reflect (box_block (grid_to_block $0)) true)) true))
-3.03	(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) (touches_any_boundary (grid_to_block $0)))) true))

Compression message saved to: compressionMessages/2020-03-29T21:25:48.381959
Compression backend will run for most 99 iterations
Total number of candidates: 57737
Constructed version spaces and coalesced candidates in 30.9769s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 40.5994s.
Initial score: -508.567963
Scored candidates in 2.32937s.
Improved score to -484.578855 (dScore=23.989109) w/ new primitive
	#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) : tlogical -> tcolor -> list(tsplitblock) -> tgridout
rewrote all of the frontiers in 1.2376m.
Completed one step of memory consolidation in 2.55816m.
New primitive is used 5 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 false)))
  (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
  (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
  (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 true)))
  (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 false)))
Total number of candidates: 65163
Constructed version spaces and coalesced candidates in 34.9203s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 43.935s.
Initial score: -482.744160
Scored candidates in 2.4062s.
Improved score to -474.852489 (dScore=7.891670) w/ new primitive
	#(lambda (to_min_grid $0 true)) : tblock -> tgridout
rewrote all of the frontiers in 1.30058m.
Completed one step of memory consolidation in 2.74623m.
New primitive is used 17 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (grid_to_block $0))))
  (lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (grid_to_block $0) 3 west true))))
  (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 1) 2)))
  (lambda (#(lambda (to_min_grid $0 true)) (reflect (reflect (grid_to_block $0) false) true)))
  (lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
  (lambda (#(lambda (to_min_grid $0 true)) (reflect (reflect (grid_to_block $0) false) true)))
  (lambda (#(lambda (to_min_grid $0 true)) (reflect (grid_to_block $0) false)))
  (lambda (#(lambda (to_min_grid $0 true)) (reflect (grid_to_block $0) true)))
  (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) 1)))
  (lambda (#(lambda (to_min_grid $0 true)) (reflect (remove_black_b (grid_to_block $0)) false)))
  (lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 2)))
  (lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) west 1)))
  (lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) pink red)))
  (lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 1)))
  (lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) orange grey)))
  (lambda (#(lambda (to_min_grid $0 true)) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
  (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 1) 0)))
Total number of candidates: 49880
Constructed version spaces and coalesced candidates in 23.3802s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 34.9325s.
Initial score: -474.667676
Scored candidates in 2.27387s.
Improved score to -467.361379 (dScore=7.306297) w/ new primitive
	#(lambda (reflect (grid_to_block $0) true)) : tgridin -> tblock
rewrote all of the frontiers in 1.11119m.
Completed one step of memory consolidation in 2.19688m.
New primitive is used 5 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (to_min_grid $0 true)) (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)))
  (lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
  (lambda (#(lambda (to_min_grid $0 true)) (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)))
  (lambda (#(lambda (to_min_grid $0 true)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
  (lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
Total number of candidates: 28296
Constructed version spaces and coalesced candidates in 21.045s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 26.6765s.
Initial score: -467.019717
Scored candidates in 2.28119s.
Improved score to -462.292969 (dScore=4.726748) w/ new primitive
	#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) : tblock -> tgridout
rewrote all of the frontiers in 1.02447m.
Completed one step of memory consolidation in 1.91295m.
New primitive is used 4 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
  (lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
  (lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (grid_to_block $0)))
  (lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
Total number of candidates: 26698
Constructed version spaces and coalesced candidates in 22.3966s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 30.7161s.
Initial score: -461.938573
Scored candidates in 2.29882s.
Improved score to -458.841804 (dScore=3.096769) w/ new primitive
	#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) : tgridin -> tgridout
rewrote all of the frontiers in 1.01833m.
Completed one step of memory consolidation in 2.00276m.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
  (lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
Total number of candidates: 27180
Constructed version spaces and coalesced candidates in 21.8562s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 28.6241s.
Initial score: -458.850758
Scored candidates in 2.32083s.
Improved score to -456.913606 (dScore=1.937152) w/ new primitive
	#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) : tgridin -> tlogical -> tgridout
rewrote all of the frontiers in 1.03165m.
Completed one step of memory consolidation in 1.96502m.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
  (lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
  (lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lor))
Total number of candidates: 25085
Constructed version spaces and coalesced candidates in 22.2807s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 31.6121s.
Initial score: -456.758058
Scored candidates in 2.34862s.
Improved score to -452.877335 (dScore=3.880723) w/ new primitive
	#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) : int -> list(tblock) -> tgridout
rewrote all of the frontiers in 1.01381m.
Completed one step of memory consolidation in 2.00874m.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true true)))
  (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true true)))
  (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (find_tiles_by_black_b $0))))
Total number of candidates: 22960
Constructed version spaces and coalesced candidates in 19.0982s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 24.3553s.
Initial score: -452.872655
Scored candidates in 2.2996s.
Improved score to -450.640545 (dScore=2.232110) w/ new primitive
	#(lambda (to_min_grid (remove_black_b $0) false)) : tblock -> tgridout
rewrote all of the frontiers in 1.01855m.
Completed one step of memory consolidation in 1.82648m.
New primitive is used 4 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grid_to_block $0)))
  (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west true)))
  (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $0) blue black)))
  (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
Total number of candidates: 21882
Constructed version spaces and coalesced candidates in 18.6701s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 24.9205s.
Initial score: -446.898459
Scored candidates in 2.30136s.
Improved score to -441.891309 (dScore=5.007150) w/ new primitive
	#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) : tgridin -> tgridout
rewrote all of the frontiers in 56.2771s.
Completed one step of memory consolidation in 1.75106m.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
  (lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
Total number of candidates: 21266
Constructed version spaces and coalesced candidates in 18.3495s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 24.6972s.
Initial score: -441.885767
Scored candidates in 2.58684s.
No improvement possible.
Completed one step of memory consolidation in 48.5873s.
completed ocaml compression in 19.7809m.
#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
#(lambda (to_min_grid (remove_black_b $0) false))
#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1))))
#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true))))
#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false)))
#(lambda (reflect (grid_to_block $0) true))
#(lambda (to_min_grid $0 true))
#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4)))))))
merge_blocks
filter_blocks
map_blocks
nth_of_sorted_object_list
fill_color
fill_snakewise
replace_color
remove_black_b
reflect
move
duplicate
grow
box_block
is_symmetrical
is_rectangle
has_min_tiles
touches_any_boundary
touches_boundary
to_original_grid_overlay
to_min_grid
get_height
get_width
get_original_grid_height
get_original_grid_width
get_num_tiles
nth_primary_color
block_to_tile
find_same_color_blocks
find_blocks_by_black_b
find_blocks_by_color
split_grid
grid_to_block
find_tiles_by_black_b
is_interior
extend_towards_until
extend_towards_until_edge
filter_tiles
map_tiles
tiles_to_blocks
overlap_split_blocks
to_blocks
color_logical
color_pair
land
lor
lxor
north
south
west
east
0
1
2
3
4
5
6
7
8
9
true
false
invisible
black
blue
red
green
yellow
grey
pink
orange
teal
maroon
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 false)))
(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $1 $0 red land)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grid_to_block $0)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (grid_to_block $0))))
(lambda (to_min_grid (box_block (remove_black_b (grid_to_block $0))) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (remove_black_b (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grid_to_block $0))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (box_block (grid_to_block $0)))))
(lambda (to_min_grid (remove_black_b (grid_to_block $0)) (touches_any_boundary (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (remove_black_b (grid_to_block $0)))))
(lambda (to_min_grid (merge_blocks (find_blocks_by_black_b $0 false false)) false))
(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false))
(lambda (to_original_grid_overlay (box_block (move (grid_to_block $0) 1 south false)) false))
(lambda (to_original_grid_overlay (move (box_block (grid_to_block $0)) 1 south false) false))
(lambda (to_original_grid_overlay (move (remove_black_b (grid_to_block $0)) 1 south false) false))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 east true)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (grid_to_block $0) 3 east true))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west true)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (grid_to_block $0) 3 west true))))
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 green lxor)))))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 0) 2) false))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 0) 2)))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 1) 2) false))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true true)))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 2) 2) false))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 2) 2)))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 3) 2) false))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 3) 2)))
(lambda (to_min_grid (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 4) 2) false))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (find_blocks_by_black_b $0 true true) (lambda 4) 2)))
(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (reflect (grid_to_block $0) false) true)))
(lambda (to_min_grid (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false) false))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) false))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) true))
(lambda (to_original_grid_overlay (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false) false))
(lambda (to_original_grid_overlay (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false) true))
(lambda (to_min_grid (box_block (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false))))
(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
(lambda (to_original_grid_overlay (box_block (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (reflect (box_block (grid_to_block $0)) true)) true))
(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) (touches_any_boundary (grid_to_block $0)))) true))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) east) true))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) south) true))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) west) true))
(lambda (to_min_grid (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (to_original_grid_overlay (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) false))
(lambda (to_original_grid_overlay (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)) true))
(lambda (to_min_grid (reflect (reflect (grid_to_block $0) false) true) false))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (reflect (grid_to_block $0) false) true)))
(lambda (to_min_grid (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false) false))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) false))
(lambda (to_original_grid_overlay (reflect (reflect (grid_to_block $0) false) true) true))
(lambda (to_original_grid_overlay (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false) false))
(lambda (to_original_grid_overlay (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false) true))
(lambda (to_min_grid (box_block (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false))))
(lambda (to_min_grid (reflect (grid_to_block $0) false) false))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (grid_to_block $0)))
(lambda (to_original_grid_overlay (reflect (grid_to_block $0) false) false))
(lambda (to_original_grid_overlay (reflect (grid_to_block $0) false) true))
(lambda (to_min_grid (box_block (reflect (grid_to_block $0) false)) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (reflect (grid_to_block $0) false))))
(lambda (to_min_grid (reflect (box_block (grid_to_block $0)) false) false))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (grid_to_block $0))))
(lambda (to_min_grid (reflect (grid_to_block $0) false) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) false))
(lambda (to_min_grid (#(lambda (reflect (grid_to_block $0) true)) $0) false))
(lambda (#(lambda (to_min_grid $0 true)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (to_original_grid_overlay (#(lambda (reflect (grid_to_block $0) true)) $0) false))
(lambda (to_original_grid_overlay (#(lambda (reflect (grid_to_block $0) true)) $0) true))
(lambda (to_min_grid (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (to_min_grid (reflect (box_block (grid_to_block $0)) true) false))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (box_block (grid_to_block $0)) true)))
(lambda (to_min_grid (reflect (grid_to_block $0) (touches_any_boundary (grid_to_block $0))) false))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (grid_to_block $0) (touches_any_boundary (grid_to_block $0)))))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 0) 1) false))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 0) 1)))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 1) 1) false))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true true)))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 2) 1) false))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 2) 1)))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 3) 1) false))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 3) 1)))
(lambda (to_min_grid (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 4) 1) false))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (find_same_color_blocks $0 true true) (lambda 4) 1)))
(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) false))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (reflect (grid_to_block $0) false)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (reflect (grid_to_block $0) false))))
(lambda (to_min_grid (box_block (remove_black_b (reflect (grid_to_block $0) false))) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (remove_black_b (reflect (grid_to_block $0) false)))))
(lambda (to_min_grid (reflect (remove_black_b (grid_to_block $0)) false) (touches_any_boundary (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (reflect (grid_to_block $0) false))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (box_block (reflect (grid_to_block $0) false)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (reflect (grid_to_block $0) false))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) false)) (lambda (lambda $0))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) false)) (lambda (lambda $1))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) true)) (lambda (lambda $0))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) true)) (lambda (lambda $1))))
(lambda (to_min_grid (grow (grid_to_block $0) 2) false))
(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 2)))
(lambda (to_min_grid (box_block (grow (grid_to_block $0) 2)) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (grow (grid_to_block $0) 2))))
(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 2) false))
(lambda (#(lambda (to_min_grid $0 true)) (grow (box_block (grid_to_block $0)) 2)))
(lambda (to_min_grid (grow (grid_to_block $0) 2) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 2) false))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 2)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (grow (grid_to_block $0) 2))))
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 green lxor)))))
(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) east 1)))
(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) false))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) west 1)))
(lambda (to_min_grid (duplicate (box_block (grid_to_block $0)) east 1) false))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (box_block (grid_to_block $0)) east 1)))
(lambda (to_min_grid (duplicate (box_block (grid_to_block $0)) west 1) false))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (box_block (grid_to_block $0)) west 1)))
(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) (touches_any_boundary (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $0) blue black)))
(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) pink red)))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) false))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) true))
(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) pink red)) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (replace_color (grid_to_block $0) pink red))))
(lambda (to_min_grid (replace_color (box_block (grid_to_block $0)) pink red) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (replace_color (remove_black_b (grid_to_block $0)) pink red) false))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (remove_black_b (grid_to_block $0)) pink red)))
(lambda (to_min_grid (grow (grid_to_block $0) 1) false))
(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 1)))
(lambda (to_min_grid (box_block (grow (grid_to_block $0) 1)) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (grow (grid_to_block $0) 1))))
(lambda (to_min_grid (grow (box_block (grid_to_block $0)) 1) false))
(lambda (#(lambda (to_min_grid $0 true)) (grow (box_block (grid_to_block $0)) 1)))
(lambda (to_min_grid (grow (grid_to_block $0) 1) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 1) false))
(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
(lambda (to_min_grid (grow (grid_to_block $0) 1) (touches_boundary (grid_to_block $0) north)))
(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) orange grey)))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) false))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) true))
(lambda (to_min_grid (box_block (replace_color (grid_to_block $0) orange grey)) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (replace_color (grid_to_block $0) orange grey))))
(lambda (to_min_grid (replace_color (box_block (grid_to_block $0)) orange grey) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) (touches_any_boundary (grid_to_block $0))))
(lambda (to_min_grid (replace_color (remove_black_b (grid_to_block $0)) orange grey) false))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (remove_black_b (grid_to_block $0)) orange grey)))
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lor))
(lambda (overlap_split_blocks (split_grid $0 true) (lambda (lambda (color_logical $1 $0 green lor)))))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 4) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 4) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 5) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 5) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) true))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
(lambda (to_original_grid_overlay (fill_snakewise (merge_blocks (to_blocks (split_grid $0 false))) (color_pair black black)) true))
(lambda (to_min_grid (box_block (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black))))
(lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) (touches_any_boundary (grid_to_block $0))))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (remove_black_b (merge_blocks (to_blocks (split_grid $0 false)))) black)))
(lambda (to_original_grid_overlay (box_block (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)) false))
(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (fill_color (remove_black_b (merge_blocks (to_blocks (split_grid $0 false)))) black) true))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 0) false))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 0)))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 6) false))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 0) 6)))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 1) 0) false))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (find_tiles_by_black_b $0))))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 1) 6) false))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (find_tiles_by_black_b $0))))
(lambda (to_min_grid (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) 0) false))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (tiles_to_blocks (find_tiles_by_black_b $0)) (lambda 2) 0)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 false)))
(lambda (overlap_split_blocks (split_grid $0 false) (lambda (lambda (color_logical $1 $0 pink lor)))))
(lambda (to_min_grid (grow (remove_black_b (grid_to_block $0)) 1) false))
(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
(lambda (to_min_grid (grow (box_block (remove_black_b (grid_to_block $0))) 1) false))
(lambda (#(lambda (to_min_grid $0 true)) (grow (box_block (remove_black_b (grid_to_block $0))) 1)))
(lambda (to_min_grid (grow (remove_black_b (box_block (grid_to_block $0))) 1) false))
(lambda (to_min_grid (grow (remove_black_b (remove_black_b (grid_to_block $0))) 1) false))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (box_block (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
(lambda (to_original_grid_overlay (box_block (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (reflect (box_block (grid_to_block $0)) true)) true))
(lambda (to_original_grid_overlay (remove_black_b (reflect (grid_to_block $0) (touches_any_boundary (grid_to_block $0)))) true))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) north) true))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) south) true))
(lambda (to_original_grid_overlay (extend_towards_until_edge (block_to_tile (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) west) true))
Finished consolidation.
Induced a grammar in 1187.8 seconds
Grammar after iteration 1:
-0.000008	t0	$_
0.000000	tblock -> ttile	block_to_tile
0.000000	tgridin -> bool -> list(tsplitblock)	split_grid
0.000000	tgridin -> list(ttile)	find_tiles_by_black_b
0.000000	tcolor -> tcolor -> list(tcolor)	color_pair
-0.032790	(ttile -> bool) -> list(ttile) -> list(ttile)	filter_tiles
-0.032790	(ttile -> ttile) -> list(ttile) -> list(ttile)	map_tiles
-0.060626	tdirection	south
-0.089612	tlogical	lor
-0.089612	tlogical	lxor
-0.089620	tgridin -> bool -> bool -> list(tblock)	find_same_color_blocks
-0.092375	tdirection	west
-0.092375	tdirection	east
-0.121360	tgridin -> bool -> bool -> list(tblock)	find_blocks_by_black_b
-0.121361	tlogical	land
-0.121368	list(ttile) -> list(tblock)	tiles_to_blocks
-0.121368	list(tsplitblock) -> list(tblock)	to_blocks
-0.125165	tdirection	north
-0.154158	(tblock -> bool) -> list(tblock) -> list(tblock)	filter_blocks
-0.154158	(tblock -> tblock) -> list(tblock) -> list(tblock)	map_blocks
-0.154158	tgridin -> tcolor -> bool -> bool -> list(tblock)	find_blocks_by_color
-0.168299	int	1
-0.192072	int	2
-0.200991	bool	false
-0.214103	int	0
-0.218675	bool	true
-0.224119	int	3
-0.241012	int	6
-0.247805	tcolor	black
-0.248036	tcolor	red
-0.248036	tcolor	pink
-0.256909	int	4
-0.257234	int	5
-0.263685	tblock -> int	get_height
-0.263685	tblock -> int	get_width
-0.263685	tblock -> int	get_original_grid_height
-0.263685	tblock -> int	get_original_grid_width
-0.263685	tblock -> int	get_num_tiles
-0.263685	int	7
-0.263685	int	8
-0.263685	int	9
-0.279785	tblock -> int -> tcolor	nth_primary_color
-0.279785	tcolor	blue
-0.279785	tcolor	grey
-0.279785	tcolor	orange
-0.312566	tcolor -> tcolor -> tcolor -> tlogical -> tcolor	color_logical
-0.312574	tcolor	green
-0.312575	tcolor	invisible
-0.312575	tcolor	yellow
-0.312575	tcolor	teal
-0.312575	tcolor	maroon
-0.350856	tgridin -> tblock	grid_to_block
-0.407621	tblock -> bool -> bool	is_rectangle
-0.439153	tblock -> bool	touches_any_boundary
-0.440411	tblock -> tdirection -> bool	touches_boundary
-0.440411	tblock -> bool -> bool	is_symmetrical
-0.440411	tblock -> int -> bool	has_min_tiles
-0.440411	ttile -> bool -> bool	is_interior
-0.585701	tblock -> bool -> tgridout	to_original_grid_overlay
-0.616473	tblock -> tcolor -> tcolor -> tblock	replace_color
-0.637473	tblock -> tblock	remove_black_b
-0.643542	list(tsplitblock) -> (tcolor -> tcolor -> tcolor) -> tgridout	overlap_split_blocks
-0.647237	list(tblock) -> tblock	merge_blocks
-0.647245	tblock -> int -> tdirection -> bool -> tblock	move
-0.647245	tblock -> tdirection -> int -> tblock	duplicate
-0.647476	tblock -> tcolor -> tblock	fill_color
-0.656748	tblock -> bool -> tgridout	to_min_grid
-0.678970	tblock -> int -> tblock	grow
-0.693163	tblock -> tblock	box_block
-0.706462	tblock -> bool -> tblock	reflect
-0.710090	list(tblock) -> (tblock -> int) -> int -> tblock	nth_of_sorted_object_list
-0.711536	tblock -> list(tcolor) -> tblock	fill_snakewise
-0.711781	ttile -> tdirection -> tblock	extend_towards_until_edge
-0.711783	ttile -> tdirection -> (tblock -> bool) -> tblock	extend_towards_until
-0.511778	tblock -> tgridout	#(lambda (to_min_grid $0 true))
-0.555850	tblock -> tgridout	#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false)))
-0.568850	tblock -> tgridout	#(lambda (to_min_grid (remove_black_b $0) false))
-0.581030	tgridin -> tlogical -> tgridout	#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true))))
-0.582572	int -> list(tblock) -> tgridout	#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1))))
-0.611810	tlogical -> tcolor -> list(tsplitblock) -> tgridout	#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4)))))))
-0.611815	tgridin -> tgridout	#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
-0.611824	tgridin -> tgridout	#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
-0.616507	tgridin -> tblock	#(lambda (reflect (grid_to_block $0) true))
Currently using this much memory: 240009216
Exported checkpoint to experimentOutputs/list/2020-03-29T13:24:55.783873/list_aic=1.0_arity=3_ET=28800_it=1_MF=10_noConsolidation=False_pc=30.0_RW=False_solver=ocaml_STM=True_L=1.0_TRR=unsolved_K=2_topkNotMAP=False_rec=False.pickle
WARNING: Do not have an English description of:
 #(lambda (to_min_grid $0 true))

WARNING: Do not have an English description of:
 #(lambda (to_min_grid (remove_black_b $0) false))

WARNING: Do not have an English description of:
 #(lambda (reflect (grid_to_block $0) true))

WARNING: Do not have an English description of:
 #(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4)))))))

WARNING: Do not have an English description of:
 #(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1))))

WARNING: Do not have an English description of:
 #(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))

WARNING: Do not have an English description of:
 #(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))

WARNING: Do not have an English description of:
 #(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false)))

WARNING: Do not have an English description of:
 #(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true))))

Exporting primitive graph to experimentOutputs/list/2020-03-29T13:24:55.783873/list_primitives_0_depth.pdf
Exported primitive graph to experimentOutputs/list/2020-03-29T13:24:55.783873/list_primitives_0_unordered.pdf
Currently using this much memory: 241176576
Currently using this much memory: 241176576
Using a waking task batch of size: 400
Disabling parallelism on the Python side because we only have one job.
If you are using ocaml, there could still be parallelism.
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 0.000000 <= MDL < 1.500000. Timeout 28800.000000.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 0.)
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 1.500000 <= MDL < 3.000000. Timeout 28781.454981.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 2.)
(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 3.000000 <= MDL < 4.500000. Timeout 28761.636895.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 3.)
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lor))
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 4.500000 <= MDL < 6.000000. Timeout 28741.688093.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 6.)
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grid_to_block $0)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (grid_to_block $0)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (#(lambda (to_min_grid $0 true)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 6.000000 <= MDL < 7.500000. Timeout 28721.201450.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 301. |finished| = 32.)
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
(lambda (to_min_grid (#(lambda (reflect (grid_to_block $0) true)) $0) true))
(lambda (to_min_grid (#(lambda (reflect (grid_to_block $0) true)) $0) false))
(lambda (to_original_grid_overlay (#(lambda (reflect (grid_to_block $0) true)) $0) true))
(lambda (to_original_grid_overlay (#(lambda (reflect (grid_to_block $0) true)) $0) false))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
(python) Launching tgridin -> tgridout (400 tasks) w/ 30 CPUs. 7.500000 <= MDL < 9.000000. Timeout 28695.627155.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 311. |finished| = 0.)
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 false)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) north)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) west)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) east)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (merge_blocks (to_blocks (split_grid $0 false)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grid_to_block $0))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) north)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (grid_to_block $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) west)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) east)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (to_blocks (split_grid $0 true)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (to_blocks (split_grid $0 false)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (find_tiles_by_black_b $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (find_tiles_by_black_b $0))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 false)))
(python) Launching tgridin -> tgridout (399 tasks) w/ 30 CPUs. 9.000000 <= MDL < 10.500000. Timeout 28672.683714.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 311. |finished| = 0.)
(lambda (to_min_grid (remove_black_b (grid_to_block $0)) false))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (reflect (grid_to_block $0) true)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) east)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) north)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) west)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) south)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (grow (#(lambda (reflect (grid_to_block $0) true)) $0) 0)))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) south)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) west)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) east)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) north)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (reflect (grid_to_block $0) true)))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (grid_to_block $0) false)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (box_block (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (reflect (grid_to_block $0) false)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (remove_black_b (grid_to_block $0)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (remove_black_b (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 2)))
(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 2)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 1)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (map_tiles (lambda $0) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (map_tiles (lambda $0) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
(python) Launching tgridin -> tgridout (396 tasks) w/ 30 CPUs. 10.500000 <= MDL < 12.000000. Timeout 28224.828566.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 311. |finished| = 0.)
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true false)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false false)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_same_color_blocks $0 true true))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_same_color_blocks $0 true false))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_same_color_blocks $0 false true))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_same_color_blocks $0 false false))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_blocks_by_black_b $0 false false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) east 1)))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) west 1)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (map_tiles (lambda $0) (map_tiles (lambda $0) (find_tiles_by_black_b $0))))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (filter_tiles (lambda true) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (map_tiles (lambda $0) (map_tiles (lambda $0) (find_tiles_by_black_b $0))))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (find_blocks_by_black_b $0 false false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (filter_tiles (lambda true) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (find_blocks_by_black_b $0 false true)))
(lambda (#(lambda (to_min_grid $0 true)) (extend_towards_until_edge (block_to_tile (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) south)))
(python) Launching tgridin -> tgridout (393 tasks) w/ 30 CPUs. 12.000000 <= MDL < 13.500000. Timeout 26578.240004.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 311. |finished| = 0.)
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 3) (split_grid $0 false)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_symmetrical (grid_to_block $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_symmetrical (#(lambda (reflect (grid_to_block $0) true)) $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land (nth_primary_color (grid_to_block $0) 3) (split_grid $0 false)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 east true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west true)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) east))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) north))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) south))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (grid_to_block $0)) true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (grid_to_block $0)) false)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (box_block (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 (touches_any_boundary (grid_to_block $0)) true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 (touches_any_boundary (grid_to_block $0)) false)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 2)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 2))))
(lambda (to_min_grid (grow (grid_to_block $0) 2) true))
(lambda (#(lambda (to_min_grid $0 true)) (grow (box_block (grid_to_block $0)) 2)))
(lambda (#(lambda (to_min_grid $0 true)) (grow (remove_black_b (grid_to_block $0)) 2)))
(lambda (to_min_grid (grow (grid_to_block $0) 2) false))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (grow (grid_to_block $0) 2))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (grow (grid_to_block $0) 2))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) east))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) north))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) south))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $0) blue black)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $0) pink red)))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) pink red)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (box_block (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 1))))
(lambda (to_min_grid (grow (grid_to_block $0) 1) false))
(lambda (to_min_grid (grow (grid_to_block $0) 1) true))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid $0 true)) (grow (box_block (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $0) orange grey)))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) orange grey)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) east))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) north))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor (nth_primary_color (grid_to_block $0) 6) (split_grid $0 false)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (#(lambda (reflect (grid_to_block $0) true)) $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (#(lambda (reflect (grid_to_block $0) true)) $0) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (grid_to_block $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (grid_to_block $0) true))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (box_block (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 1)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (box_block (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(python) Launching tgridin -> tgridout (387 tasks) w/ 30 CPUs. 13.500000 <= MDL < 15.000000. Timeout 24971.981207.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 311. |finished| = 0.)
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (filter_blocks (lambda true) (find_blocks_by_black_b $0 true true))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)) true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (filter_blocks (lambda true) (find_blocks_by_black_b $0 true false))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)) false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) east)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) west)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) south)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true)))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)) false)))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (duplicate (grid_to_block $0) east 1))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (duplicate (grid_to_block $0) west 1))))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (box_block (grid_to_block $0)) east 1)))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (box_block (grid_to_block $0)) west 1)))
(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) true))
(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) false))
(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) true))
(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) true))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) false))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) true))
(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) true))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) false))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) true))
(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (extend_towards_until_edge (block_to_tile (grid_to_block $0)) west) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grow (grid_to_block $0) 1)) west)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grow (grid_to_block $0) 1)) south)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south) 1)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) west)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) south)))
(python) Launching tgridin -> tgridout (381 tasks) w/ 30 CPUs. 15.000000 <= MDL < 16.500000. Timeout 19328.336816.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 311. |finished| = 0.)
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) (touches_any_boundary (grid_to_block $0))))))
(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (remove_black_b (grid_to_block $0)) 3 east true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (move (grid_to_block $0) 3 west true))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (move (grid_to_block $0) 3 east true))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (remove_black_b (grid_to_block $0)) 3 west true)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (grid_to_block $0) 3 east true))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 east (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (grid_to_block $0) 3 west true))))
(lambda (#(lambda (to_min_grid $0 true)) (move (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 north true)))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) true))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true))))
(lambda (#(lambda (to_min_grid $0 true)) (move (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 north true)))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north (touches_any_boundary (grid_to_block $0)))))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) false))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (grid_to_block $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (fill_color (grid_to_block $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid $0 true)) (move (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))))
(lambda (#(lambda (to_min_grid $0 true)) (move (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))
(lambda (#(lambda (to_min_grid $0 true)) (move (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (box_block (grid_to_block $0)) blue black)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (remove_black_b (grid_to_block $0)) blue black)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (replace_color (grid_to_block $0) blue black))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (replace_color (grid_to_block $0) blue black))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (replace_color (grid_to_block $0) pink red))))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (box_block (grid_to_block $0)) pink red)))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (remove_black_b (grid_to_block $0)) pink red)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (replace_color (grid_to_block $0) pink red))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (#(lambda (reflect (grid_to_block $0) true)) $0) yellow black))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (grid_to_block $0) yellow black))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (replace_color (grid_to_block $0) orange grey))))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (box_block (grid_to_block $0)) orange grey)))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (remove_black_b (grid_to_block $0)) orange grey)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (replace_color (grid_to_block $0) orange grey))))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 8) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 5) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 4) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 7) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) true))
(lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
We enumerated this many programs, for each task:
	
Generative model enumeration results:
MISS 007bbfb7.json
MISS 00d62c1b.json
MISS 017c7c7b.json
MISS 025d127b.json
MISS 045e512c.json
HIT 0520fde7.json w/ (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 false))) ; log prior = -7.970135 ; log likelihood = 0.000000
MISS 05269061.json
MISS 05f2a901.json
MISS 06df4c85.json
MISS 08ed6ac7.json
MISS 09629e4f.json
MISS 0962bcdd.json
MISS 0a938d79.json
MISS 0b148d64.json
MISS 0ca9ddb6.json
MISS 0d3d703e.json
MISS 0dfd9992.json
MISS 0e206a2e.json
MISS 10fcaaa3.json
MISS 11852cab.json
MISS 1190e5a7.json
MISS 137eaa0f.json
MISS 150deff5.json
MISS 178fcbfb.json
MISS 1a07d186.json
MISS 1b2d62fb.json
MISS 1b60fb0c.json
MISS 1bfc4729.json
MISS 1c786137.json
MISS 1caeab9d.json
HIT 1cf80156.json w/ (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grid_to_block $0))) ; log prior = -4.788645 ; log likelihood = 0.000000
MISS 1e0a9b12.json
MISS 1e32b0e9.json
MISS 1f0c79e5.json
MISS 1f642eb9.json
MISS 1f85a75f.json
MISS 1f876c06.json
MISS 1fad071e.json
MISS 2013d3e2.json
MISS 2204b7a8.json
MISS 22168020.json
MISS 22233c11.json
MISS 2281f1f4.json
MISS 228f6490.json
MISS 22eb0ac0.json
MISS 234bbc79.json
MISS 23581191.json
MISS 239be575.json
MISS 23b5c85d.json
MISS 253bf280.json
MISS 25d487eb.json
MISS 25d8a9c8.json
HIT 25ff71a9.json w/ (lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false)) ; log prior = -15.316824 ; log likelihood = 0.000000
MISS 264363fd.json
MISS 272f95fa.json
MISS 27a28665.json
HIT 28bf18c6.json w/ (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west true))) ; log prior = -13.498324 ; log likelihood = 0.000000
MISS 28e73c20.json
MISS 29623171.json
MISS 29c11459.json
MISS 29ec7d0e.json
MISS 2bcee788.json
MISS 2bee17df.json
MISS 2c608aff.json
MISS 2dc579da.json
MISS 2dd70a9a.json
MISS 2dee498d.json
MISS 31aa019c.json
MISS 321b1fc6.json
MISS 32597951.json
MISS 3345333e.json
HIT 3428a4f5.json w/ (lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor)) ; log prior = -3.474956 ; log likelihood = 0.000000
MISS 3618c87e.json
MISS 3631a71a.json
MISS 363442ee.json
MISS 36d67576.json
MISS 36fdfd69.json
MISS 3906de3d.json
HIT 39a8645d.json w/ (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true false))) ; log prior = -10.812841 ; log likelihood = 0.000000
MISS 39e1d7f9.json
MISS 3aa6fb7a.json
MISS 3ac3eb23.json
MISS 3af2c5a8.json
MISS 3bd67248.json
MISS 3bdb4ada.json
MISS 3befdf3e.json
HIT 3c9b0459.json w/ (lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0))) ; log prior = -5.041296 ; log likelihood = 0.000000
MISS 3de23699.json
MISS 3e980e27.json
MISS 3eda0437.json
MISS 3f7978a0.json
MISS 40853293.json
MISS 4093f84a.json
MISS 41e4d17e.json
MISS 4258a5f9.json
MISS 4290ef0e.json
MISS 42a50994.json
MISS 4347f46a.json
MISS 444801d8.json
MISS 445eab21.json
MISS 447fd412.json
MISS 44d8ac46.json
MISS 44f52bb0.json
MISS 4522001f.json
MISS 4612dd53.json
MISS 46442a0e.json
MISS 469497ad.json
MISS 46f33fce.json
MISS 47c1f68c.json
MISS 484b58aa.json
MISS 48d8fb45.json
MISS 4938f0c2.json
HIT 496994bd.json w/ (lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0)) ; log prior = -2.417600 ; log likelihood = 0.000000
MISS 49d1d64f.json
MISS 4be741c5.json
HIT 4c4377d9.json w/ (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true))) ; log prior = -13.739693 ; log likelihood = 0.000000
MISS 4c5c2cf0.json
MISS 50846271.json
MISS 508bd3b6.json
MISS 50cb2852.json
MISS 5117e062.json
MISS 5168d44c.json
MISS 539a4f51.json
MISS 53b68214.json
MISS 543a7ed5.json
MISS 54d82841.json
MISS 54d9e175.json
MISS 5521c0d9.json
HIT 5582e5ca.json w/ (lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0)))) ; log prior = -15.092093 ; log likelihood = 0.000000
MISS 5614dbcf.json
MISS 56dc2b01.json
MISS 56ff96f3.json
MISS 57aa92db.json
MISS 5ad4f10b.json
MISS 5bd6f4ac.json
MISS 5c0a986e.json
MISS 5c2c9af4.json
MISS 5daaa586.json
MISS 60b61512.json
HIT 6150a2bd.json w/ (lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0))) ; log prior = -5.041296 ; log likelihood = 0.000000
MISS 623ea044.json
MISS 62c24649.json
MISS 63613498.json
MISS 6430c8c4.json
MISS 6455b5f5.json
MISS 662c240a.json
MISS 67385a82.json
MISS 673ef223.json
MISS 6773b310.json
HIT 67a3c6ac.json w/ (lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (grid_to_block $0))) ; log prior = -4.775645 ; log likelihood = 0.000000
MISS 67a423a3.json
MISS 67e8384a.json
MISS 681b3aeb.json
MISS 6855a6e4.json
HIT 68b16354.json w/ (lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0)) ; log prior = -2.417600 ; log likelihood = 0.000000
MISS 694f12f3.json
MISS 6a1e5592.json
MISS 6aa20dc0.json
MISS 6b9890af.json
MISS 6c434453.json
MISS 6cdd2623.json
MISS 6cf79266.json
MISS 6d0160f0.json
MISS 6d0aefbc.json
MISS 6d58a25d.json
MISS 6d75e8bb.json
MISS 6e02f1e3.json
MISS 6e19193c.json
MISS 6e82a1ae.json
MISS 6ecd11f4.json
MISS 6f8cd79b.json
HIT 6fa7a44f.json w/ (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))) ; log prior = -13.675154 ; log likelihood = 0.000000
MISS 72322fa7.json
HIT 72ca375d.json w/ (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false false))) ; log prior = -10.739644 ; log likelihood = 0.000000
MISS 73251a56.json
MISS 7447852a.json
HIT 7468f01a.json w/ (lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0)))) ; log prior = -7.476272 ; log likelihood = 0.000000
MISS 746b3537.json
MISS 74dd1130.json
MISS 75b8110e.json
MISS 760b3cac.json
MISS 776ffc46.json
MISS 77fdfe62.json
MISS 780d0b14.json
MISS 7837ac64.json
MISS 794b24be.json
MISS 7b6016b9.json
MISS 7b7f7511.json
MISS 7c008303.json
MISS 7ddcd7ec.json
MISS 7df24a62.json
MISS 7e0986d6.json
MISS 7f4411dc.json
MISS 7fe24cdd.json
MISS 80af3007.json
MISS 810b9b61.json
MISS 82819916.json
MISS 83302e8f.json
MISS 834ec97d.json
MISS 8403a5d5.json
MISS 846bdb03.json
MISS 855e0971.json
MISS 85c4e7cd.json
MISS 868de0fa.json
MISS 8731374e.json
MISS 88a10436.json
MISS 88a62173.json
MISS 890034e9.json
MISS 8a004b2b.json
HIT 8be77c9e.json w/ (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))) ; log prior = -13.675154 ; log likelihood = 0.000000
MISS 8d5021e8.json
MISS 8d510a79.json
MISS 8e1813be.json
MISS 8e5a5113.json
MISS 8eb1be9a.json
MISS 8efcae92.json
MISS 8f2ea7aa.json
MISS 90c28cc7.json
MISS 90f3ed37.json
MISS 913fb3ed.json
MISS 91413438.json
MISS 91714a58.json
HIT 9172f3a0.json w/ (lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 2))) ; log prior = -10.130049 ; log likelihood = 0.000000
MISS 928ad970.json
MISS 93b581b8.json
MISS 941d9a10.json
MISS 94f9d214.json
MISS 952a094c.json
MISS 9565186b.json
MISS 95990924.json
MISS 963e52fc.json
MISS 97999447.json
MISS 97a05b5b.json
MISS 98cf29f8.json
MISS 995c5fa3.json
HIT 99b1bc43.json w/ (lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor)) ; log prior = -3.474956 ; log likelihood = 0.000000
MISS 99fa7670.json
MISS 9aec4887.json
MISS 9af7a82c.json
MISS 9d9215db.json
MISS 9dfd6313.json
MISS 9ecd008a.json
MISS 9edfc990.json
MISS 9f236235.json
MISS a1570a43.json
MISS a2fd1cf0.json
MISS a3325580.json
MISS a3df8b1e.json
HIT a416b8f3.json w/ (lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) west 1))) ; log prior = -11.460845 ; log likelihood = 0.000000
MISS a48eeaf7.json
MISS a5313dff.json
MISS a5f85a15.json
MISS a61ba2ce.json
MISS a61f2674.json
MISS a64e4611.json
MISS a65b410d.json
MISS a68b268e.json
MISS a699fb00.json
HIT a740d043.json w/ (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $0) blue black))) ; log prior = -12.551285 ; log likelihood = 0.000000
MISS a78176bb.json
MISS a79310a0.json
MISS a85d4709.json
MISS a87f7484.json
MISS a8c38be5.json
MISS a8d7556c.json
MISS a9f96cdd.json
MISS aabf363d.json
MISS aba27056.json
MISS ac0a08a4.json
MISS ae3edfdc.json
MISS ae4f1146.json
MISS aedd82e4.json
MISS af902bf9.json
MISS b0c4d837.json
MISS b190f7f5.json
HIT b1948b0a.json w/ (lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) pink red))) ; log prior = -12.462696 ; log likelihood = 0.000000
MISS b230c067.json
MISS b27ca6d3.json
MISS b2862040.json
MISS b527c5c6.json
MISS b548a754.json
MISS b60334d2.json
MISS b6afb2da.json
MISS b7249182.json
MISS b775ac94.json
MISS b782dc8a.json
HIT b8825c91.json w/ (lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (grid_to_block $0) yellow black)))) ; log prior = -15.271702 ; log likelihood = 0.000000
MISS b8cdaf2b.json
MISS b91ae062.json
MISS b94a9452.json
MISS b9b7f026.json
MISS ba26e723.json
MISS ba97ae07.json
MISS bb43febb.json
MISS bbc9ae5d.json
MISS bc1d5164.json
MISS bd4472b8.json
MISS bda2d7a6.json
MISS bdad9b1f.json
MISS be94b721.json
MISS beb8660c.json
MISS c0f76784.json
MISS c1d99e64.json
MISS c3e719e8.json
MISS c3f564a4.json
MISS c444b776.json
HIT c59eb873.json w/ (lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0)) ; log prior = -2.417609 ; log likelihood = 0.000000
MISS c8cbb738.json
HIT c8f0f002.json w/ (lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) orange grey))) ; log prior = -12.526193 ; log likelihood = 0.000000
MISS c909285e.json
MISS c9e6f938.json
MISS c9f8e694.json
MISS caa06a1f.json
MISS cbded52d.json
MISS cce03e0d.json
MISS cdecee7f.json
MISS ce22a75a.json
HIT ce4f8723.json w/ (lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lor)) ; log prior = -3.474956 ; log likelihood = 0.000000
MISS ce602527.json
MISS ce9e57f2.json
MISS cf98881b.json
HIT d037b0a7.json w/ (lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) false)) ; log prior = -16.134321 ; log likelihood = 0.000000
MISS d06dbe63.json
MISS d07ae81c.json
MISS d0f5fe59.json
MISS d10ecb37.json
MISS d13f3404.json
MISS d22278a0.json
HIT d23f8c26.json w/ (lambda (#(lambda (to_min_grid $0 true)) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black))) ; log prior = -14.107655 ; log likelihood = 0.000000
MISS d2abd087.json
MISS d364b489.json
MISS d406998b.json
MISS d43fd935.json
MISS d4469b4b.json
MISS d4a91cb9.json
MISS d4f3cd78.json
MISS d511f180.json
MISS d5d6de2d.json
MISS d631b094.json
MISS d687bc17.json
MISS d6ad076f.json
MISS d89b689b.json
MISS d8c310e9.json
MISS d90796e8.json
MISS d9f24cd1.json
HIT d9fac9be.json w/ (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (find_tiles_by_black_b $0)))) ; log prior = -8.080264 ; log likelihood = 0.000000
HIT dae9d2b5.json w/ (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 false))) ; log prior = -7.938386 ; log likelihood = 0.000000
MISS db3e9e38.json
MISS db93a21d.json
MISS dbc1a6ce.json
MISS dc0a314f.json
MISS dc1df850.json
MISS dc433765.json
MISS ddf7fa4f.json
MISS de1cd16c.json
MISS ded97339.json
MISS e179c5f4.json
MISS e21d9049.json
MISS e26a3af2.json
MISS e3497940.json
MISS e40b9e2f.json
MISS e48d4e1a.json
MISS e5062a87.json
MISS e509e548.json
MISS e50d258f.json
MISS e6721834.json
MISS e73095fd.json
MISS e76a88a6.json
MISS e8593010.json
MISS e8dc4411.json
MISS e9614598.json
MISS e98196ab.json
MISS e9afcf9a.json
MISS ea32f347.json
MISS ea786f4a.json
MISS eb281b96.json
MISS eb5a1d5d.json
MISS ec883f72.json
MISS ecdecbb3.json
MISS ed36ccf7.json
MISS ef135b50.json
MISS f15e1fac.json
MISS f1cefba8.json
HIT f25fbde4.json w/ (lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0)) ; log prior = -2.417609 ; log likelihood = 0.000000
HIT f25ffba3.json w/ (lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0)) ; log prior = -2.417600 ; log likelihood = 0.000000
MISS f2829549.json
MISS f35d900a.json
MISS f5b8619d.json
MISS f76d97a5.json
MISS f8a8fe49.json
MISS f8b3ba0a.json
MISS f8c80d96.json
MISS f8ff0b80.json
MISS f9012d9b.json
MISS fafffa47.json
MISS fcb5c309.json
MISS fcc82909.json
MISS feca6190.json
MISS ff28f65a.json
MISS ff805c23.json
Hits 32/400 tasks
Average description length of a program solving a task: 8.900603 nats
Generative model average:  2549 sec.	median: 131 	max: 17019 	standard deviation 4359
Currently using this much memory: 247599104
Frontiers discovered top down: 32
Total frontiers: 33
Currently using this much memory: 247607296
Showing the top 5 programs in each frontier being sent to the compressor:
0520fde7.json
-0.06	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 false)))
-4.62	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) false))))
-4.62	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_symmetrical (grid_to_block $0) false))))
-4.64	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) true))))
-4.89	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) false))))

1cf80156.json
-0.25	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grid_to_block $0)))
-2.90	(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (grid_to_block $0))))
-2.95	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grid_to_block $0))))
-3.01	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grid_to_block $0))))
-4.38	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south)))

25ff71a9.json
-0.18	(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false))
-2.88	(lambda (to_original_grid_overlay (move (remove_black_b (grid_to_block $0)) 1 south false) false))
-2.93	(lambda (to_original_grid_overlay (box_block (move (grid_to_block $0) 1 south false)) false))
-2.93	(lambda (to_original_grid_overlay (move (box_block (grid_to_block $0)) 1 south false) false))

28bf18c6.json
-0.94	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west true)))
-0.94	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 east true)))
-3.57	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west (touches_any_boundary (grid_to_block $0)))))
-3.57	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 east (touches_any_boundary (grid_to_block $0)))))
-3.58	(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (grid_to_block $0) 3 west true))))

3428a4f5.json
-0.01	(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
-4.56	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
-7.19	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
-7.46	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
-8.55	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))

39a8645d.json
-0.87	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true false)))
-0.89	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true true)))
-3.51	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (grid_to_block $0)) false)))
-3.53	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (grid_to_block $0)) true)))
-3.53	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true (touches_any_boundary (grid_to_block $0)))))

3c9b0459.json
-0.20	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
-2.90	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))))
-2.96	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
-4.33	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) south)))
-4.36	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) west)))

496994bd.json
-0.00	(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
-7.28	(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
-9.91	(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
-9.98	(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
-10.04	(lambda (to_original_grid_overlay (box_block (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))

4c4377d9.json
-0.96	(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true)))
-1.01	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true)))
-3.01	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) false))
-3.03	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) true))
-3.59	(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north (touches_any_boundary (grid_to_block $0)))))

5582e5ca.json
-2.07	(lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
-2.12	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
-2.13	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
-2.34	(lambda (#(lambda (to_min_grid $0 true)) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (grid_to_block $0) 0))))
-2.34	(lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))

6150a2bd.json
-0.14	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
-2.90	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
-4.27	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) south)))
-4.31	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) west)))
-4.31	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) east)))

67a3c6ac.json
-0.21	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (grid_to_block $0)))
-2.91	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
-2.97	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (grid_to_block $0))))
-4.34	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south)))
-4.35	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (to_blocks (split_grid $0 false)))))

68b16354.json
-0.18	(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
-2.76	(lambda (#(lambda (to_min_grid $0 true)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
-2.82	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
-4.74	(lambda (to_original_grid_overlay (#(lambda (reflect (grid_to_block $0) true)) $0) false))
-4.76	(lambda (to_original_grid_overlay (#(lambda (reflect (grid_to_block $0) true)) $0) true))

6fa7a44f.json
-0.96	(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
-1.01	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
-3.01	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
-3.03	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))
-3.59	(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))

72ca375d.json
-1.46	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false false)))
-1.48	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false true)))
-1.48	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true false)))
-1.50	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true true)))
-4.11	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 (touches_any_boundary (grid_to_block $0)) false)))

7468f01a.json
-0.41	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
-2.40	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (reflect (grid_to_block $0) false)))
-3.11	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (remove_black_b (grid_to_block $0)))))
-3.17	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (remove_black_b (grid_to_block $0)))))
-3.17	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (box_block (grid_to_block $0)))))

7b7f7511.json
-1.38	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) false)) (lambda (lambda $0))))
-1.38	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) false)) (lambda (lambda $1))))
-1.40	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) true)) (lambda (lambda $0))))
-1.40	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (find_same_color_blocks $0 false true)) true)) (lambda (lambda $1))))

8be77c9e.json
-0.37	(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
-2.43	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
-2.44	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))
-3.01	(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))
-3.13	(lambda (#(lambda (to_min_grid $0 true)) (box_block (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))))

9172f3a0.json
-0.95	(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 2)))
-1.01	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 2)))
-3.00	(lambda (to_min_grid (grow (grid_to_block $0) 2) false))
-3.02	(lambda (to_min_grid (grow (grid_to_block $0) 2) true))
-3.65	(lambda (#(lambda (to_min_grid $0 true)) (grow (remove_black_b (grid_to_block $0)) 2)))

99b1bc43.json
-0.01	(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
-4.56	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
-7.19	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
-7.46	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
-8.55	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))

a416b8f3.json
-1.02	(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) west 1)))
-1.02	(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) east 1)))
-3.07	(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) false))
-3.07	(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false))
-3.09	(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) true))

a740d043.json
-0.23	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $0) blue black)))
-2.93	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (replace_color (grid_to_block $0) blue black))))
-2.93	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (remove_black_b (grid_to_block $0)) blue black)))
-2.99	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (replace_color (grid_to_block $0) blue black))))
-2.99	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (box_block (grid_to_block $0)) blue black)))

b1948b0a.json
-1.01	(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) pink red)))
-1.06	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $0) pink red)))
-2.99	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) false))
-3.00	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) true))
-3.06	(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false))

b8825c91.json
-0.57	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (grid_to_block $0) yellow black))))
-0.83	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (#(lambda (reflect (grid_to_block $0) true)) $0) yellow black))))

c59eb873.json
-0.00	(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
-7.69	(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 1)))
-7.75	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
-9.74	(lambda (to_min_grid (grow (grid_to_block $0) 1) false))
-9.76	(lambda (to_min_grid (grow (grid_to_block $0) 1) true))

c8f0f002.json
-1.01	(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) orange grey)))
-1.06	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $0) orange grey)))
-2.99	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) false))
-3.00	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) true))
-3.06	(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false))

ce4f8723.json
-0.01	(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lor))
-4.56	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 true)))
-7.19	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
-7.46	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
-8.55	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))

d037b0a7.json
-2.25	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) false))
-2.27	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) true))
-2.29	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) false))
-2.30	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) false))
-2.30	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) true))

d23f8c26.json
-0.87	(lambda (#(lambda (to_min_grid $0 true)) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
-0.91	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
-2.87	(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
-2.94	(lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
-3.57	(lambda (#(lambda (to_min_grid $0 true)) (fill_color (remove_black_b (merge_blocks (to_blocks (split_grid $0 false)))) black)))

d9fac9be.json
-0.94	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (find_tiles_by_black_b $0))))
-0.97	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (find_tiles_by_black_b $0))))
-2.75	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (map_tiles (lambda $0) (find_tiles_by_black_b $0)))))
-2.77	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (map_tiles (lambda $0) (find_tiles_by_black_b $0)))))
-3.71	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (find_blocks_by_black_b $0 false false)))

dae9d2b5.json
-0.08	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 false)))
-4.64	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) false))))
-4.64	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (grid_to_block $0) false))))
-4.65	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) true))))
-4.65	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (grid_to_block $0) true))))

f25fbde4.json
-0.00	(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
-7.75	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
-10.45	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 1)))
-10.45	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 1))))
-10.50	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grow (grid_to_block $0) 1))))

f25ffba3.json
-0.00	(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
-7.28	(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
-9.41	(lambda (#(lambda (to_min_grid $0 true)) (extend_towards_until_edge (block_to_tile (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) south)))
-9.91	(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
-9.98	(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))

Compression message saved to: compressionMessages/2020-03-30T05:46:38.449771
Compression backend will run for most 99 iterations
Total number of candidates: 25463
Constructed version spaces and coalesced candidates in 17.2073s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 22.1391s.
Initial score: -488.114824
Scored candidates in 2.59557s.
Improved score to -471.672428 (dScore=16.442396) w/ new primitive
	#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) : tgridin -> tdirection -> tgridout
rewrote all of the frontiers in 58.6792s.
Completed one step of memory consolidation in 1.72766m.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 north))
  (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south))
  (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south))
Total number of candidates: 22843
Constructed version spaces and coalesced candidates in 16.6991s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 21.2734s.
Initial score: -471.498206
Scored candidates in 2.59449s.
Improved score to -468.115338 (dScore=3.382869) w/ new primitive
	#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) : tgridin -> tcolor -> tcolor -> tgridout
rewrote all of the frontiers in 58.4468s.
Completed one step of memory consolidation in 1.69866m.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 blue black))
  (lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 pink red))
  (lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 orange grey))
Total number of candidates: 22548
Constructed version spaces and coalesced candidates in 16.5475s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 20.957s.
Initial score: -468.093687
Scored candidates in 2.63605s.
Improved score to -467.221031 (dScore=0.872657) w/ new primitive
	#(lambda (find_same_color_blocks $0 false true)) : tgridin -> list(tblock)
rewrote all of the frontiers in 58.7199s.
Completed one step of memory consolidation in 1.69544m.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (#(lambda (find_same_color_blocks $0 false true)) $0)))
  (lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0))))
  (lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) false)) (lambda (lambda $0))))
Total number of candidates: 22085
Constructed version spaces and coalesced candidates in 12.5494s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 16.8431s.
Initial score: -466.496718
Scored candidates in 2.63549s.
No improvement possible.
Completed one step of memory consolidation in 34.4887s.
completed ocaml compression in 5.69798m.
#(lambda (find_same_color_blocks $0 false true))
#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0)))))
#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true))))
#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
#(lambda (to_min_grid (remove_black_b $0) false))
#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1))))
#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true))))
#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false)))
#(lambda (reflect (grid_to_block $0) true))
#(lambda (to_min_grid $0 true))
#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4)))))))
merge_blocks
filter_blocks
map_blocks
nth_of_sorted_object_list
fill_color
fill_snakewise
replace_color
remove_black_b
reflect
move
duplicate
grow
box_block
is_symmetrical
is_rectangle
has_min_tiles
touches_any_boundary
touches_boundary
to_original_grid_overlay
to_min_grid
get_height
get_width
get_original_grid_height
get_original_grid_width
get_num_tiles
nth_primary_color
block_to_tile
find_same_color_blocks
find_blocks_by_black_b
find_blocks_by_color
split_grid
grid_to_block
find_tiles_by_black_b
is_interior
extend_towards_until
extend_towards_until_edge
filter_tiles
map_tiles
tiles_to_blocks
overlap_split_blocks
to_blocks
color_logical
color_pair
land
lor
lxor
north
south
west
east
0
1
2
3
4
5
6
7
8
9
true
false
invisible
black
blue
red
green
yellow
grey
pink
orange
teal
maroon
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 false)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_symmetrical (grid_to_block $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_symmetrical (#(lambda (reflect (grid_to_block $0) true)) $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land (nth_primary_color (grid_to_block $0) 3) (split_grid $0 false)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 3) (split_grid $0 false)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) (touches_any_boundary (grid_to_block $0))))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grid_to_block $0)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (merge_blocks (to_blocks (split_grid $0 false)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) west)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) east)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) north)))
(lambda (to_min_grid (remove_black_b (grid_to_block $0)) false))
(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false))
(lambda (to_original_grid_overlay (move (remove_black_b (grid_to_block $0)) 1 south false) false))
(lambda (to_original_grid_overlay (box_block (move (grid_to_block $0) 1 south false)) false))
(lambda (to_original_grid_overlay (move (box_block (grid_to_block $0)) 1 south false) false))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 east true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 east (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (grid_to_block $0) 3 west true))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (grid_to_block $0) 3 east true))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (remove_black_b (grid_to_block $0)) 3 west true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (move (grid_to_block $0) 3 west true))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (remove_black_b (grid_to_block $0)) 3 east true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (move (grid_to_block $0) 3 east true))))
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) east))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) north))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) west))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (grid_to_block $0)) false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (grid_to_block $0)) true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)) false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)) true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (filter_blocks (lambda true) (find_blocks_by_black_b $0 true false))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (filter_blocks (lambda true) (find_blocks_by_black_b $0 true true))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) south)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) west)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) east)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) north)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (reflect (grid_to_block $0) true)))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)))
(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (box_block (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) south)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) west)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) east)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 north))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true)))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) false))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) true))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (move (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 north true)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true))))
(lambda (#(lambda (to_min_grid $0 true)) (move (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 north true)))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (grid_to_block $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (fill_color (grid_to_block $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) south)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) west)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) east)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) north)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (reflect (grid_to_block $0) true)))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (grow (#(lambda (reflect (grid_to_block $0) true)) $0) 0)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (grid_to_block $0)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (grid_to_block $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (to_blocks (split_grid $0 false)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (to_blocks (split_grid $0 true)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) west)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) east)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) north)))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (grid_to_block $0) false)))
(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
(lambda (#(lambda (to_min_grid $0 true)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (to_original_grid_overlay (#(lambda (reflect (grid_to_block $0) true)) $0) false))
(lambda (to_original_grid_overlay (#(lambda (reflect (grid_to_block $0) true)) $0) true))
(lambda (to_min_grid (#(lambda (reflect (grid_to_block $0) true)) $0) false))
(lambda (to_min_grid (#(lambda (reflect (grid_to_block $0) true)) $0) true))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (move (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))))
(lambda (#(lambda (to_min_grid $0 true)) (move (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 south true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (#(lambda (find_same_color_blocks $0 false true)) $0)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 (touches_any_boundary (grid_to_block $0)) false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 (touches_any_boundary (grid_to_block $0)) true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)) false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (reflect (grid_to_block $0) false)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (remove_black_b (grid_to_block $0)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (remove_black_b (grid_to_block $0)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (box_block (grid_to_block $0)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_same_color_blocks $0 false false))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_same_color_blocks $0 true false))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_blocks_by_black_b $0 false false))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_same_color_blocks $0 true true))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) false)) (lambda (lambda $0))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) false)) (lambda (lambda $1))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) true)) (lambda (lambda $0))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) true)) (lambda (lambda $1))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))))
(lambda (#(lambda (to_min_grid $0 true)) (move (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 2)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 2)))
(lambda (to_min_grid (grow (grid_to_block $0) 2) false))
(lambda (to_min_grid (grow (grid_to_block $0) 2) true))
(lambda (#(lambda (to_min_grid $0 true)) (grow (remove_black_b (grid_to_block $0)) 2)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (grow (grid_to_block $0) 2))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (grow (grid_to_block $0) 2))))
(lambda (#(lambda (to_min_grid $0 true)) (grow (box_block (grid_to_block $0)) 2)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 2)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 2))))
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) east))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) north))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) west))))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) west 1)))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) east 1)))
(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) false))
(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false))
(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) true))
(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) true))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (duplicate (grid_to_block $0) west 1))))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (box_block (grid_to_block $0)) west 1)))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (duplicate (grid_to_block $0) east 1))))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (box_block (grid_to_block $0)) east 1)))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 blue black))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (replace_color (grid_to_block $0) blue black))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (remove_black_b (grid_to_block $0)) blue black)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (replace_color (grid_to_block $0) blue black))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (box_block (grid_to_block $0)) blue black)))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) pink red)))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 pink red))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) false))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) true))
(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) true))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (replace_color (grid_to_block $0) pink red))))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (remove_black_b (grid_to_block $0)) pink red)))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (replace_color (grid_to_block $0) pink red))))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (box_block (grid_to_block $0)) pink red)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (grid_to_block $0) yellow black))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (#(lambda (reflect (grid_to_block $0) true)) $0) yellow black))))
(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
(lambda (to_min_grid (grow (grid_to_block $0) 1) false))
(lambda (to_min_grid (grow (grid_to_block $0) 1) true))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid $0 true)) (grow (box_block (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (box_block (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) orange grey)))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 orange grey))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) false))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) true))
(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) true))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (replace_color (grid_to_block $0) orange grey))))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (remove_black_b (grid_to_block $0)) orange grey)))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (replace_color (grid_to_block $0) orange grey))))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (box_block (grid_to_block $0)) orange grey)))
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lor))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 true)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) east))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) north))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) west))))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 4) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 5) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 7) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 8) false))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
(lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (remove_black_b (merge_blocks (to_blocks (split_grid $0 false)))) black)))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black))))
(lambda (to_original_grid_overlay (fill_snakewise (merge_blocks (to_blocks (split_grid $0 false))) (color_pair black black)) true))
(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (fill_color (remove_black_b (merge_blocks (to_blocks (split_grid $0 false)))) black) true))
(lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) (touches_any_boundary (grid_to_block $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (find_tiles_by_black_b $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (find_tiles_by_black_b $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (map_tiles (lambda $0) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (map_tiles (lambda $0) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (find_blocks_by_black_b $0 false false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (find_blocks_by_black_b $0 false true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (filter_tiles (lambda true) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (filter_tiles (lambda true) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (map_tiles (lambda $0) (map_tiles (lambda $0) (find_tiles_by_black_b $0))))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (map_tiles (lambda $0) (map_tiles (lambda $0) (find_tiles_by_black_b $0))))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 false)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (grid_to_block $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (grid_to_block $0) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (#(lambda (reflect (grid_to_block $0) true)) $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (#(lambda (reflect (grid_to_block $0) true)) $0) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor (nth_primary_color (grid_to_block $0) 6) (split_grid $0 false)))
(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (box_block (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grow (grid_to_block $0) 1)) south)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grow (grid_to_block $0) 1)) west)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (extend_towards_until_edge (block_to_tile (grid_to_block $0)) west) 1)))
(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
(lambda (#(lambda (to_min_grid $0 true)) (extend_towards_until_edge (block_to_tile (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) south)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (box_block (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) south)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) west)))
Finished consolidation.
Induced a grammar in 342.7 seconds
Grammar after iteration 2:
0.000000	t0	$_
0.000000	tgridin -> bool -> list(tsplitblock)	split_grid
0.000000	tcolor -> tcolor -> list(tcolor)	color_pair
-0.005575	tblock -> ttile	block_to_tile
-0.006511	tgridin -> list(ttile)	find_tiles_by_black_b
-0.032169	(ttile -> ttile) -> list(ttile) -> list(ttile)	map_tiles
-0.036696	(ttile -> bool) -> list(ttile) -> list(ttile)	filter_tiles
-0.088544	tdirection	south
-0.089612	tlogical	lor
-0.089612	tlogical	lxor
-0.121361	tlogical	land
-0.122996	bool	false
-0.136336	tgridin -> bool -> bool -> list(tblock)	find_blocks_by_black_b
-0.137091	list(tsplitblock) -> list(tblock)	to_blocks
-0.139703	list(ttile) -> list(tblock)	tiles_to_blocks
-0.167526	int	1
-0.168093	tgridin -> bool -> bool -> list(tblock)	find_same_color_blocks
-0.170554	(tblock -> bool) -> list(tblock) -> list(tblock)	filter_blocks
-0.170986	(tblock -> tblock) -> list(tblock) -> list(tblock)	map_blocks
-0.170986	tgridin -> tcolor -> bool -> bool -> list(tblock)	find_blocks_by_color
-0.180920	tdirection	west
-0.180934	tdirection	east
-0.180935	tdirection	north
-0.191974	int	2
-0.214469	int	0
-0.223407	int	3
-0.227346	bool	true
-0.239405	int	6
-0.259514	int	4
-0.259514	int	5
-0.259514	int	7
-0.259514	int	8
-0.262885	tblock -> int	get_height
-0.262885	tblock -> int	get_width
-0.262885	tblock -> int	get_original_grid_height
-0.262885	tblock -> int	get_original_grid_width
-0.262885	tblock -> int	get_num_tiles
-0.262885	int	9
-0.265476	tcolor	black
-0.296526	tcolor	pink
-0.296666	tcolor	red
-0.304898	tblock -> bool -> bool	is_rectangle
-0.327641	tblock -> int -> tcolor	nth_primary_color
-0.328115	tcolor	blue
-0.328115	tcolor	yellow
-0.328115	tcolor	grey
-0.328115	tcolor	orange
-0.329387	tblock -> bool	touches_any_boundary
-0.335537	ttile -> bool -> bool	is_interior
-0.336055	tblock -> bool -> bool	is_symmetrical
-0.337584	tblock -> tdirection -> bool	touches_boundary
-0.337688	tblock -> int -> bool	has_min_tiles
-0.359743	tcolor	green
-0.360905	tcolor -> tcolor -> tcolor -> tlogical -> tcolor	color_logical
-0.360905	tcolor	invisible
-0.360905	tcolor	teal
-0.360905	tcolor	maroon
-0.373377	tgridin -> tblock	grid_to_block
-0.553422	tblock -> tblock	remove_black_b
-0.567009	list(tblock) -> tblock	merge_blocks
-0.585005	tblock -> int -> tdirection -> bool -> tblock	move
-0.585010	tblock -> tdirection -> int -> tblock	duplicate
-0.585132	tblock -> tcolor -> tblock	fill_color
-0.616091	tblock -> tcolor -> tcolor -> tblock	replace_color
-0.616582	tblock -> int -> tblock	grow
-0.632020	tblock -> tblock	box_block
-0.642698	ttile -> tdirection -> tblock	extend_towards_until_edge
-0.646601	tblock -> bool -> tblock	reflect
-0.649418	tblock -> list(tcolor) -> tblock	fill_snakewise
-0.649549	list(tblock) -> (tblock -> int) -> int -> tblock	nth_of_sorted_object_list
-0.649549	ttile -> tdirection -> (tblock -> bool) -> tblock	extend_towards_until
-0.674819	tblock -> bool -> tgridout	to_original_grid_overlay
-0.709148	list(tsplitblock) -> (tcolor -> tcolor -> tcolor) -> tgridout	overlap_split_blocks
-0.729952	tblock -> bool -> tgridout	to_min_grid
-0.092513	tgridin -> list(tblock)	#(lambda (find_same_color_blocks $0 false true))
-0.541046	tgridin -> tblock	#(lambda (reflect (grid_to_block $0) true))
-0.568020	tblock -> tgridout	#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false)))
-0.646627	int -> list(tblock) -> tgridout	#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1))))
-0.646632	tgridin -> tdirection -> tgridout	#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true))))
-0.647255	tgridin -> tcolor -> tcolor -> tgridout	#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0)))))
-0.647685	tgridin -> tlogical -> tgridout	#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true))))
-0.651418	tgridin -> tgridout	#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
-0.654424	tblock -> tgridout	#(lambda (to_min_grid (remove_black_b $0) false))
-0.668272	tblock -> tgridout	#(lambda (to_min_grid $0 true))
-0.676309	tlogical -> tcolor -> list(tsplitblock) -> tgridout	#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4)))))))
-0.677449	tgridin -> tgridout	#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
Currently using this much memory: 247369728
Exported checkpoint to experimentOutputs/list/2020-03-29T13:24:55.783873/list_aic=1.0_arity=3_ET=28800_it=2_MF=10_noConsolidation=False_pc=30.0_RW=False_solver=ocaml_STM=True_L=1.0_TRR=unsolved_K=2_topkNotMAP=False_rec=False.pickle
WARNING: Do not have an English description of:
 #(lambda (to_min_grid $0 true))

WARNING: Do not have an English description of:
 #(lambda (to_min_grid (remove_black_b $0) false))

WARNING: Do not have an English description of:
 #(lambda (reflect (grid_to_block $0) true))

WARNING: Do not have an English description of:
 #(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4)))))))

WARNING: Do not have an English description of:
 #(lambda (find_same_color_blocks $0 false true))

WARNING: Do not have an English description of:
 #(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1))))

WARNING: Do not have an English description of:
 #(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))

WARNING: Do not have an English description of:
 #(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))

WARNING: Do not have an English description of:
 #(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false)))

WARNING: Do not have an English description of:
 #(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true))))

WARNING: Do not have an English description of:
 #(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true))))

WARNING: Do not have an English description of:
 #(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0)))))

Exporting primitive graph to experimentOutputs/list/2020-03-29T13:24:55.783873/list_primitives_1_depth.pdf
Exported primitive graph to experimentOutputs/list/2020-03-29T13:24:55.783873/list_primitives_1_unordered.pdf
Currently using this much memory: 247169024
Currently using this much memory: 247169024
Using a waking task batch of size: 371
Disabling parallelism on the Python side because we only have one job.
If you are using ocaml, there could still be parallelism.
(python) Launching tgridin -> tgridout (371 tasks) w/ 30 CPUs. 0.000000 <= MDL < 1.500000. Timeout 28800.000000.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 0.)
(python) Launching tgridin -> tgridout (371 tasks) w/ 30 CPUs. 1.500000 <= MDL < 3.000000. Timeout 28775.428140.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 2.)
(python) Launching tgridin -> tgridout (371 tasks) w/ 30 CPUs. 3.000000 <= MDL < 4.500000. Timeout 28746.909707.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 7.)
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 north))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south))
(python) Launching tgridin -> tgridout (371 tasks) w/ 30 CPUs. 4.500000 <= MDL < 6.000000. Timeout 28723.439076.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 6.)
(python) Launching tgridin -> tgridout (371 tasks) w/ 30 CPUs. 6.000000 <= MDL < 7.500000. Timeout 28695.450497.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 0. |finished| = 43.)
(python) Launching tgridin -> tgridout (371 tasks) w/ 30 CPUs. 7.500000 <= MDL < 9.000000. Timeout 28658.302625.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 300. |finished| = 125.)
(python) Launching tgridin -> tgridout (371 tasks) w/ 30 CPUs. 9.000000 <= MDL < 10.500000. Timeout 28616.600752.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 300. |finished| = 0.)
(python) Launching tgridin -> tgridout (371 tasks) w/ 30 CPUs. 10.500000 <= MDL < 12.000000. Timeout 28367.972520.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 300. |finished| = 0.)
(python) Launching tgridin -> tgridout (371 tasks) w/ 30 CPUs. 12.000000 <= MDL < 13.500000. Timeout 26757.631801.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 300. |finished| = 0.)
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 1) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (grid_to_block $0) 1) black))
(python) Launching tgridin -> tgridout (371 tasks) w/ 30 CPUs. 13.500000 <= MDL < 15.000000. Timeout 25073.834395.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 300. |finished| = 0.)
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 0)))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true)))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 1)))
(python) Launching tgridin -> tgridout (371 tasks) w/ 30 CPUs. 15.000000 <= MDL < 16.500000. Timeout 19342.811721.
	(ocaml) WARNING: programTimeout not set. Defaulting to 0.100000.
	(ocaml: 30 CPUs. shatter: 300. |fringe| = 300. |finished| = 0.)
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0))) 0) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (remove_black_b (grid_to_block $0)) 0) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) 0) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (box_block (grid_to_block $0)) 1) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)) 1) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) 0) black))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 7)) (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 4)) (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (#(lambda (to_min_grid $0 true)) (merge_blocks (filter_blocks (lambda (has_min_tiles $0 3)) (#(lambda (find_same_color_blocks $0 false true)) $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 5)) (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 0)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (merge_blocks (filter_blocks (lambda (has_min_tiles $0 3)) (#(lambda (find_same_color_blocks $0 false true)) $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 3)) (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (merge_blocks (filter_blocks (lambda (has_min_tiles $0 6)) (#(lambda (find_same_color_blocks $0 false true)) $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 6)) (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) true))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) false))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (#(lambda (reflect (grid_to_block $0) true)) $0) yellow black))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (grid_to_block $0) yellow black))))
We enumerated this many programs, for each task:
	
Generative model enumeration results:
MISS 007bbfb7.json
MISS 00d62c1b.json
MISS 017c7c7b.json
MISS 025d127b.json
MISS 045e512c.json
MISS 05269061.json
MISS 05f2a901.json
MISS 06df4c85.json
MISS 08ed6ac7.json
MISS 09629e4f.json
MISS 0962bcdd.json
MISS 0a938d79.json
HIT 0b148d64.json w/ (lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (grid_to_block $0) 1) black)) ; log prior = -12.737110 ; log likelihood = 0.000000
MISS 0ca9ddb6.json
MISS 0d3d703e.json
MISS 0dfd9992.json
MISS 0e206a2e.json
MISS 10fcaaa3.json
MISS 11852cab.json
MISS 1190e5a7.json
MISS 137eaa0f.json
MISS 150deff5.json
MISS 178fcbfb.json
MISS 1a07d186.json
MISS 1b2d62fb.json
MISS 1b60fb0c.json
MISS 1bfc4729.json
MISS 1c786137.json
MISS 1caeab9d.json
MISS 1e0a9b12.json
MISS 1e32b0e9.json
MISS 1f0c79e5.json
MISS 1f642eb9.json
HIT 1f85a75f.json w/ (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 0))) ; log prior = -14.988589 ; log likelihood = 0.000000
MISS 1f876c06.json
MISS 1fad071e.json
MISS 2013d3e2.json
MISS 2204b7a8.json
MISS 22168020.json
MISS 22233c11.json
MISS 2281f1f4.json
MISS 228f6490.json
MISS 22eb0ac0.json
MISS 234bbc79.json
MISS 23581191.json
MISS 239be575.json
MISS 23b5c85d.json
MISS 253bf280.json
MISS 25d487eb.json
MISS 25d8a9c8.json
MISS 264363fd.json
MISS 272f95fa.json
MISS 27a28665.json
MISS 28e73c20.json
MISS 29623171.json
MISS 29c11459.json
MISS 29ec7d0e.json
MISS 2bcee788.json
MISS 2bee17df.json
MISS 2c608aff.json
MISS 2dc579da.json
MISS 2dd70a9a.json
MISS 2dee498d.json
MISS 31aa019c.json
MISS 321b1fc6.json
MISS 32597951.json
MISS 3345333e.json
MISS 3618c87e.json
MISS 3631a71a.json
MISS 363442ee.json
MISS 36d67576.json
MISS 36fdfd69.json
MISS 3906de3d.json
MISS 39e1d7f9.json
MISS 3aa6fb7a.json
MISS 3ac3eb23.json
MISS 3af2c5a8.json
MISS 3bd67248.json
MISS 3bdb4ada.json
MISS 3befdf3e.json
MISS 3de23699.json
MISS 3e980e27.json
MISS 3eda0437.json
MISS 3f7978a0.json
MISS 40853293.json
MISS 4093f84a.json
MISS 41e4d17e.json
MISS 4258a5f9.json
MISS 4290ef0e.json
MISS 42a50994.json
MISS 4347f46a.json
MISS 444801d8.json
MISS 445eab21.json
MISS 447fd412.json
MISS 44d8ac46.json
MISS 44f52bb0.json
MISS 4522001f.json
MISS 4612dd53.json
MISS 46442a0e.json
MISS 469497ad.json
MISS 46f33fce.json
MISS 47c1f68c.json
MISS 484b58aa.json
MISS 48d8fb45.json
MISS 4938f0c2.json
MISS 49d1d64f.json
MISS 4be741c5.json
HIT 4c4377d9.json w/ (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 north)) ; log prior = -3.961078 ; log likelihood = 0.000000
MISS 4c5c2cf0.json
MISS 50846271.json
MISS 508bd3b6.json
MISS 50cb2852.json
MISS 5117e062.json
MISS 5168d44c.json
MISS 539a4f51.json
MISS 53b68214.json
MISS 543a7ed5.json
MISS 54d82841.json
MISS 54d9e175.json
MISS 5521c0d9.json
MISS 5614dbcf.json
MISS 56dc2b01.json
MISS 56ff96f3.json
MISS 57aa92db.json
MISS 5ad4f10b.json
MISS 5bd6f4ac.json
MISS 5c0a986e.json
MISS 5c2c9af4.json
MISS 5daaa586.json
MISS 60b61512.json
MISS 623ea044.json
MISS 62c24649.json
MISS 63613498.json
MISS 6430c8c4.json
MISS 6455b5f5.json
MISS 662c240a.json
MISS 67385a82.json
MISS 673ef223.json
MISS 6773b310.json
MISS 67a423a3.json
MISS 67e8384a.json
MISS 681b3aeb.json
MISS 6855a6e4.json
MISS 694f12f3.json
MISS 6a1e5592.json
MISS 6aa20dc0.json
MISS 6b9890af.json
MISS 6c434453.json
MISS 6cdd2623.json
MISS 6cf79266.json
MISS 6d0160f0.json
MISS 6d0aefbc.json
MISS 6d58a25d.json
MISS 6d75e8bb.json
MISS 6e02f1e3.json
MISS 6e19193c.json
MISS 6e82a1ae.json
MISS 6ecd11f4.json
MISS 6f8cd79b.json
HIT 6fa7a44f.json w/ (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south)) ; log prior = -3.868687 ; log likelihood = 0.000000
MISS 72322fa7.json
MISS 73251a56.json
MISS 7447852a.json
MISS 746b3537.json
MISS 74dd1130.json
MISS 75b8110e.json
MISS 760b3cac.json
MISS 776ffc46.json
MISS 77fdfe62.json
MISS 780d0b14.json
MISS 7837ac64.json
MISS 794b24be.json
MISS 7b6016b9.json
MISS 7c008303.json
MISS 7ddcd7ec.json
MISS 7df24a62.json
MISS 7e0986d6.json
MISS 7f4411dc.json
MISS 7fe24cdd.json
MISS 80af3007.json
MISS 810b9b61.json
MISS 82819916.json
MISS 83302e8f.json
MISS 834ec97d.json
MISS 8403a5d5.json
MISS 846bdb03.json
MISS 855e0971.json
MISS 85c4e7cd.json
MISS 868de0fa.json
MISS 8731374e.json
MISS 88a10436.json
MISS 88a62173.json
MISS 890034e9.json
MISS 8a004b2b.json
HIT 8be77c9e.json w/ (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south)) ; log prior = -3.868687 ; log likelihood = 0.000000
MISS 8d5021e8.json
MISS 8d510a79.json
MISS 8e1813be.json
MISS 8e5a5113.json
MISS 8eb1be9a.json
MISS 8efcae92.json
MISS 8f2ea7aa.json
MISS 90c28cc7.json
MISS 90f3ed37.json
MISS 913fb3ed.json
MISS 91413438.json
MISS 91714a58.json
MISS 928ad970.json
MISS 93b581b8.json
MISS 941d9a10.json
MISS 94f9d214.json
MISS 952a094c.json
MISS 9565186b.json
MISS 95990924.json
MISS 963e52fc.json
MISS 97999447.json
MISS 97a05b5b.json
MISS 98cf29f8.json
MISS 995c5fa3.json
MISS 99fa7670.json
MISS 9aec4887.json
MISS 9af7a82c.json
MISS 9d9215db.json
MISS 9dfd6313.json
MISS 9ecd008a.json
MISS 9edfc990.json
MISS 9f236235.json
MISS a1570a43.json
MISS a2fd1cf0.json
MISS a3325580.json
MISS a3df8b1e.json
MISS a48eeaf7.json
MISS a5313dff.json
MISS a5f85a15.json
MISS a61ba2ce.json
MISS a61f2674.json
MISS a64e4611.json
MISS a65b410d.json
MISS a68b268e.json
MISS a699fb00.json
MISS a78176bb.json
MISS a79310a0.json
MISS a85d4709.json
MISS a87f7484.json
MISS a8c38be5.json
MISS a8d7556c.json
MISS a9f96cdd.json
MISS aabf363d.json
MISS aba27056.json
MISS ac0a08a4.json
MISS ae3edfdc.json
MISS ae4f1146.json
MISS aedd82e4.json
MISS af902bf9.json
MISS b0c4d837.json
MISS b190f7f5.json
MISS b230c067.json
MISS b27ca6d3.json
MISS b2862040.json
MISS b527c5c6.json
MISS b548a754.json
MISS b60334d2.json
MISS b6afb2da.json
MISS b7249182.json
MISS b775ac94.json
MISS b782dc8a.json
HIT b8825c91.json w/ (lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (grid_to_block $0) yellow black)))) ; log prior = -15.430711 ; log likelihood = 0.000000
MISS b8cdaf2b.json
MISS b91ae062.json
MISS b94a9452.json
MISS b9b7f026.json
MISS ba26e723.json
MISS ba97ae07.json
MISS bb43febb.json
MISS bbc9ae5d.json
MISS bc1d5164.json
MISS bd4472b8.json
MISS bda2d7a6.json
MISS bdad9b1f.json
MISS be94b721.json
MISS beb8660c.json
MISS c0f76784.json
MISS c1d99e64.json
MISS c3e719e8.json
MISS c3f564a4.json
MISS c444b776.json
MISS c8cbb738.json
HIT c909285e.json w/ (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 1))) ; log prior = -14.941647 ; log likelihood = 0.000000
MISS c9e6f938.json
MISS c9f8e694.json
MISS caa06a1f.json
MISS cbded52d.json
MISS cce03e0d.json
MISS cdecee7f.json
MISS ce22a75a.json
MISS ce602527.json
MISS ce9e57f2.json
MISS cf98881b.json
MISS d06dbe63.json
MISS d07ae81c.json
MISS d0f5fe59.json
MISS d10ecb37.json
MISS d13f3404.json
MISS d22278a0.json
MISS d2abd087.json
MISS d364b489.json
MISS d406998b.json
MISS d43fd935.json
MISS d4469b4b.json
MISS d4a91cb9.json
MISS d4f3cd78.json
MISS d511f180.json
MISS d5d6de2d.json
MISS d631b094.json
MISS d687bc17.json
MISS d6ad076f.json
MISS d89b689b.json
MISS d8c310e9.json
MISS d90796e8.json
MISS d9f24cd1.json
MISS db3e9e38.json
MISS db93a21d.json
MISS dbc1a6ce.json
MISS dc0a314f.json
MISS dc1df850.json
MISS dc433765.json
MISS ddf7fa4f.json
MISS de1cd16c.json
MISS ded97339.json
MISS e179c5f4.json
MISS e21d9049.json
MISS e26a3af2.json
MISS e3497940.json
MISS e40b9e2f.json
MISS e48d4e1a.json
MISS e5062a87.json
MISS e509e548.json
MISS e50d258f.json
MISS e6721834.json
MISS e73095fd.json
MISS e76a88a6.json
MISS e8593010.json
MISS e8dc4411.json
MISS e9614598.json
MISS e98196ab.json
MISS e9afcf9a.json
MISS ea32f347.json
MISS ea786f4a.json
MISS eb281b96.json
MISS eb5a1d5d.json
MISS ec883f72.json
MISS ecdecbb3.json
MISS ed36ccf7.json
MISS ef135b50.json
MISS f15e1fac.json
MISS f1cefba8.json
MISS f2829549.json
MISS f35d900a.json
MISS f5b8619d.json
MISS f76d97a5.json
MISS f8a8fe49.json
MISS f8b3ba0a.json
MISS f8c80d96.json
MISS f8ff0b80.json
MISS f9012d9b.json
MISS fafffa47.json
MISS fcb5c309.json
MISS fcc82909.json
MISS feca6190.json
MISS ff28f65a.json
MISS ff805c23.json
Hits 7/371 tasks
Average description length of a program solving a task: 9.970930 nats
Generative model average:  3910 sec.	median: 2232 	max: 17125 	standard deviation 5632
Currently using this much memory: 250519552
Frontiers discovered top down: 7
Total frontiers: 36
Currently using this much memory: 250519552
Showing the top 5 programs in each frontier being sent to the compressor:
0520fde7.json
-0.06	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 false)))
-4.68	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) false))))
-4.68	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_symmetrical (grid_to_block $0) false))))
-4.78	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) true))))
-4.85	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) false))))

0b148d64.json
-0.80	(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (grid_to_block $0) 1) black))
-0.97	(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 1) black))
-3.06	(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) 0) black))
-3.52	(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (remove_black_b (grid_to_block $0)) 0) black))
-3.55	(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (box_block (grid_to_block $0)) 1) black))

1cf80156.json
-0.25	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grid_to_block $0)))
-2.93	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grid_to_block $0))))
-2.94	(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (grid_to_block $0))))
-3.00	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grid_to_block $0))))
-4.33	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south)))

1f85a75f.json
-1.36	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 0)))
-1.37	(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 0)))
-2.77	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 3)) (#(lambda (find_same_color_blocks $0 false true)) $0))))
-2.79	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (merge_blocks (filter_blocks (lambda (has_min_tiles $0 3)) (#(lambda (find_same_color_blocks $0 false true)) $0)))))
-2.79	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 6)) (#(lambda (find_same_color_blocks $0 false true)) $0))))

25ff71a9.json
-0.18	(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false))
-2.85	(lambda (to_original_grid_overlay (move (remove_black_b (grid_to_block $0)) 1 south false) false))
-2.93	(lambda (to_original_grid_overlay (box_block (move (grid_to_block $0) 1 south false)) false))
-2.93	(lambda (to_original_grid_overlay (move (box_block (grid_to_block $0)) 1 south false) false))

28bf18c6.json
-0.94	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west true)))
-0.94	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 east true)))
-3.53	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west (touches_any_boundary (grid_to_block $0)))))
-3.53	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 east (touches_any_boundary (grid_to_block $0)))))
-3.61	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (remove_black_b (grid_to_block $0)) 3 west true)))

3428a4f5.json
-0.01	(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
-4.65	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
-7.25	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
-7.41	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
-8.57	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))

39a8645d.json
-0.84	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true false)))
-0.95	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true true)))
-3.43	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (grid_to_block $0)) false)))
-3.54	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (grid_to_block $0)) true)))
-3.54	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true (touches_any_boundary (grid_to_block $0)))))

3c9b0459.json
-0.20	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
-2.87	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))))
-2.95	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
-4.28	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) south)))
-4.37	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) west)))

496994bd.json
-0.00	(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
-7.37	(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
-9.97	(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
-10.04	(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
-10.12	(lambda (to_original_grid_overlay (box_block (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))

4c4377d9.json
-0.00	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 north))
-10.08	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true)))
-10.09	(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true)))
-12.07	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) false))
-12.17	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) true))

5582e5ca.json
-2.11	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
-2.20	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
-2.21	(lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
-2.28	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (grid_to_block $0) 0))))
-2.28	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (grid_to_block $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))

6150a2bd.json
-0.14	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
-2.89	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
-4.22	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) south)))
-4.31	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) west)))
-4.31	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) east)))

67a3c6ac.json
-0.21	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (grid_to_block $0)))
-2.88	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
-2.96	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (grid_to_block $0))))
-4.29	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south)))
-4.38	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) west)))

68b16354.json
-0.17	(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
-2.84	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
-2.85	(lambda (#(lambda (to_min_grid $0 true)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
-4.77	(lambda (to_original_grid_overlay (#(lambda (reflect (grid_to_block $0) true)) $0) false))
-4.82	(lambda (to_min_grid (#(lambda (reflect (grid_to_block $0) true)) $0) false))

6fa7a44f.json
-0.00	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south))
-10.08	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
-10.09	(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
-12.07	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
-12.17	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))

72ca375d.json
-0.06	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (#(lambda (find_same_color_blocks $0 false true)) $0)))
-3.96	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false false)))
-4.07	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true false)))
-4.17	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true true)))
-6.66	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 (touches_any_boundary (grid_to_block $0)) false)))

7468f01a.json
-0.65	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0))))
-1.10	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
-3.20	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (reflect (grid_to_block $0) false)))
-3.77	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (remove_black_b (grid_to_block $0)))))
-3.85	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (remove_black_b (grid_to_block $0)))))

7b7f7511.json
-1.34	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) false)) (lambda (lambda $0))))
-1.34	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) false)) (lambda (lambda $1))))
-1.44	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) true)) (lambda (lambda $0))))
-1.44	(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) true)) (lambda (lambda $1))))

8be77c9e.json
-0.00	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south))
-10.09	(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
-12.07	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
-12.17	(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))
-12.68	(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))

9172f3a0.json
-0.97	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 2)))
-0.99	(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 2)))
-2.96	(lambda (to_min_grid (grow (grid_to_block $0) 2) false))
-3.07	(lambda (to_min_grid (grow (grid_to_block $0) 2) true))
-3.64	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 2)))

99b1bc43.json
-0.01	(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
-4.65	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
-7.25	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
-7.41	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
-8.57	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))

a416b8f3.json
-1.02	(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) west 1)))
-1.02	(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) east 1)))
-3.00	(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) false))
-3.00	(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false))
-3.10	(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) true))

a740d043.json
-0.00	(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 blue black))
-7.90	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (replace_color (grid_to_block $0) blue black))))
-7.90	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (remove_black_b (grid_to_block $0)) blue black)))
-7.98	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (replace_color (grid_to_block $0) blue black))))
-7.98	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (box_block (grid_to_block $0)) blue black)))

b1948b0a.json
-0.01	(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 pink red))
-5.26	(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) pink red)))
-7.18	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) false))
-7.23	(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false))
-7.28	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) true))

b8825c91.json
-0.61	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (grid_to_block $0) yellow black))))
-0.78	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (#(lambda (reflect (grid_to_block $0) true)) $0) yellow black))))

c59eb873.json
-0.00	(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
-7.84	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
-7.85	(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 1)))
-9.83	(lambda (to_min_grid (grow (grid_to_block $0) 1) false))
-9.93	(lambda (to_min_grid (grow (grid_to_block $0) 1) true))

c8f0f002.json
-0.01	(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 orange grey))
-5.26	(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) orange grey)))
-7.18	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) false))
-7.23	(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false))
-7.28	(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) true))

c909285e.json
-0.69	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 1)))
-0.70	(lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 1)))

ce4f8723.json
-0.01	(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lor))
-4.65	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 true)))
-7.25	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
-7.41	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
-8.57	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))

d037b0a7.json
-2.23	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) false))
-2.26	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) false))
-2.28	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) false))
-2.30	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 4) false))
-2.30	(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 5) false))

d23f8c26.json
-0.83	(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
-0.93	(lambda (#(lambda (to_min_grid $0 true)) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
-2.95	(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
-3.01	(lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
-3.60	(lambda (#(lambda (to_min_grid $0 true)) (fill_color (remove_black_b (merge_blocks (to_blocks (split_grid $0 false)))) black)))

d9fac9be.json
-0.94	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (find_tiles_by_black_b $0))))
-0.97	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (find_tiles_by_black_b $0))))
-2.74	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (map_tiles (lambda $0) (find_tiles_by_black_b $0)))))
-2.76	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (map_tiles (lambda $0) (find_tiles_by_black_b $0)))))
-3.71	(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (find_blocks_by_black_b $0 false false)))

dae9d2b5.json
-0.07	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 false)))
-4.69	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) false))))
-4.69	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (grid_to_block $0) false))))
-4.79	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) true))))
-4.79	(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (grid_to_block $0) true))))

f25fbde4.json
-0.00	(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
-7.84	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
-10.51	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 1)))
-10.51	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 1))))
-10.59	(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grow (grid_to_block $0) 1))))

f25ffba3.json
-0.00	(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
-7.37	(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
-9.43	(lambda (#(lambda (to_min_grid $0 true)) (extend_towards_until_edge (block_to_tile (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) south)))
-9.97	(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
-10.04	(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))

Compression message saved to: compressionMessages/2020-03-30T13:53:29.579470
Compression backend will run for most 99 iterations
Total number of candidates: 25620
Constructed version spaces and coalesced candidates in 13.2084s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 20.0327s.
Initial score: -506.149257
Scored candidates in 2.95208s.
Improved score to -499.143971 (dScore=7.005286) w/ new primitive
	#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $1) (lambda (get_num_tiles $0)) $0)))) : tgridin -> int -> tgridout
rewrote all of the frontiers in 1.0319m.
Completed one step of memory consolidation in 1.68023m.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $1) (lambda (get_num_tiles $0)) $0)))) $0 0))
  (lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $1) (lambda (get_num_tiles $0)) $0)))) $0 1))
Total number of candidates: 24555
Constructed version spaces and coalesced candidates in 13.3149s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 19.4626s.
Initial score: -499.112376
Scored candidates in 3.03388s.
No improvement possible.
Completed one step of memory consolidation in 38.4394s.
completed ocaml compression in 2.32139m.
#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $1) (lambda (get_num_tiles $0)) $0))))
#(lambda (find_same_color_blocks $0 false true))
#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0)))))
#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true))))
#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
#(lambda (to_min_grid (remove_black_b $0) false))
#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1))))
#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true))))
#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false)))
#(lambda (reflect (grid_to_block $0) true))
#(lambda (to_min_grid $0 true))
#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4)))))))
merge_blocks
filter_blocks
map_blocks
nth_of_sorted_object_list
fill_color
fill_snakewise
replace_color
remove_black_b
reflect
move
duplicate
grow
box_block
is_symmetrical
is_rectangle
has_min_tiles
touches_any_boundary
touches_boundary
to_original_grid_overlay
to_min_grid
get_height
get_width
get_original_grid_height
get_original_grid_width
get_num_tiles
nth_primary_color
block_to_tile
find_same_color_blocks
find_blocks_by_black_b
find_blocks_by_color
split_grid
grid_to_block
find_tiles_by_black_b
is_interior
extend_towards_until
extend_towards_until_edge
filter_tiles
map_tiles
tiles_to_blocks
overlap_split_blocks
to_blocks
color_logical
color_pair
land
lor
lxor
north
south
west
east
0
1
2
3
4
5
6
7
8
9
true
false
invisible
black
blue
red
green
yellow
grey
pink
orange
teal
maroon
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 false)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_symmetrical (grid_to_block $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_symmetrical (#(lambda (reflect (grid_to_block $0) true)) $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land (nth_primary_color (grid_to_block $0) 3) (split_grid $0 false)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 3) (split_grid $0 false)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) land red (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) (touches_any_boundary (grid_to_block $0))))))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (grid_to_block $0) 1) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 1) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) 0) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (remove_black_b (grid_to_block $0)) 0) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (box_block (grid_to_block $0)) 1) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) 0) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)) 1) black))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 (nth_primary_color (merge_blocks (tiles_to_blocks (find_tiles_by_black_b $0))) 0) black))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grid_to_block $0)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (merge_blocks (to_blocks (split_grid $0 false)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) west)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) east)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) north)))
(lambda (to_min_grid (remove_black_b (grid_to_block $0)) false))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 0)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $1) (lambda (get_num_tiles $0)) $0)))) $0 0))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 3)) (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (merge_blocks (filter_blocks (lambda (has_min_tiles $0 3)) (#(lambda (find_same_color_blocks $0 false true)) $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 6)) (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (#(lambda (to_min_grid $0 true)) (merge_blocks (filter_blocks (lambda (has_min_tiles $0 3)) (#(lambda (find_same_color_blocks $0 false true)) $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (merge_blocks (filter_blocks (lambda (has_min_tiles $0 6)) (#(lambda (find_same_color_blocks $0 false true)) $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 4)) (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 5)) (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (filter_blocks (lambda (has_min_tiles $0 7)) (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (to_original_grid_overlay (move (grid_to_block $0) 1 south false) false))
(lambda (to_original_grid_overlay (move (remove_black_b (grid_to_block $0)) 1 south false) false))
(lambda (to_original_grid_overlay (box_block (move (grid_to_block $0) 1 south false)) false))
(lambda (to_original_grid_overlay (move (box_block (grid_to_block $0)) 1 south false) false))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 east true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 west (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (grid_to_block $0) 3 east (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (grid_to_block $0) 3 west true))))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (grid_to_block $0) 3 east true))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (remove_black_b (grid_to_block $0)) 3 west true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (move (grid_to_block $0) 3 west true))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (remove_black_b (grid_to_block $0)) 3 east true)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (move (grid_to_block $0) 3 east true))))
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) east))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) north))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) west))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (grid_to_block $0)) false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (grid_to_block $0)) true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)) false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)) true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (find_blocks_by_black_b $0 true (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (filter_blocks (lambda true) (find_blocks_by_black_b $0 true false))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 2 (filter_blocks (lambda true) (find_blocks_by_black_b $0 true true))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) south)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) west)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) east)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) north)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (reflect (grid_to_block $0) true)))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)))
(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (box_block (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) south)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) west)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) east)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 north))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true)))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true)))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) false))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true) true))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (move (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 north true)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 north true))))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (fill_color (grid_to_block $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (grid_to_block $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (grid_to_block $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (grid_to_block $0) 0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (fill_color (grid_to_block $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (#(lambda (reflect (grid_to_block $0) true)) $0) (nth_primary_color (#(lambda (reflect (grid_to_block $0) true)) $0) 0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) south)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) west)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) east)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) north)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (reflect (grid_to_block $0) true)))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (#(lambda (reflect (grid_to_block $0) true)) $0) false)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (grow (#(lambda (reflect (grid_to_block $0) true)) $0) 0)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (grid_to_block $0)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (grid_to_block $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (to_blocks (split_grid $0 false)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (to_blocks (split_grid $0 true)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) west)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) east)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (extend_towards_until_edge (block_to_tile (grid_to_block $0)) north)))
(lambda (#(lambda (to_min_grid $0 true)) (reflect (grid_to_block $0) false)))
(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
(lambda (#(lambda (to_min_grid $0 true)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (#(lambda (reflect (grid_to_block $0) true)) $0)))
(lambda (to_original_grid_overlay (#(lambda (reflect (grid_to_block $0) true)) $0) false))
(lambda (to_original_grid_overlay (#(lambda (reflect (grid_to_block $0) true)) $0) true))
(lambda (to_min_grid (#(lambda (reflect (grid_to_block $0) true)) $0) false))
(lambda (to_min_grid (#(lambda (reflect (grid_to_block $0) true)) $0) true))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (move (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (#(lambda (find_same_color_blocks $0 false true)) $0)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 (touches_any_boundary (grid_to_block $0)) false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 (touches_any_boundary (grid_to_block $0)) true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 true (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)) false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 1 (find_same_color_blocks $0 false (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (grid_to_block $0))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (reflect (grid_to_block $0) false)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (remove_black_b (grid_to_block $0)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (box_block (remove_black_b (grid_to_block $0)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (box_block (grid_to_block $0)))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_same_color_blocks $0 false false))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_same_color_blocks $0 true false))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_blocks_by_black_b $0 false false))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (merge_blocks (find_same_color_blocks $0 true true))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) false)) (lambda (lambda $0))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) false)) (lambda (lambda $1))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) true)) (lambda (lambda $0))))
(lambda (overlap_split_blocks (split_grid $0 (is_rectangle (merge_blocks (#(lambda (find_same_color_blocks $0 false true)) $0)) true)) (lambda (lambda $1))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true)))) $0 south))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true)))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) false))
(lambda (to_min_grid (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true) true))
(lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (move (#(lambda (reflect (grid_to_block $0) true)) $0) 3 south true))))
(lambda (#(lambda (to_min_grid $0 true)) (move (box_block (#(lambda (reflect (grid_to_block $0) true)) $0)) 3 south true)))
(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 2)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 2)))
(lambda (to_min_grid (grow (grid_to_block $0) 2) false))
(lambda (to_min_grid (grow (grid_to_block $0) 2) true))
(lambda (#(lambda (to_min_grid $0 true)) (grow (remove_black_b (grid_to_block $0)) 2)))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (grow (grid_to_block $0) 2))))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (grow (grid_to_block $0) 2))))
(lambda (#(lambda (to_min_grid $0 true)) (grow (box_block (grid_to_block $0)) 2)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 2)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 2))))
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lxor))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 true)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) east))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (grid_to_block $0) north))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lxor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) west))))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) west 1)))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (grid_to_block $0) east 1)))
(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) false))
(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) false))
(lambda (to_min_grid (duplicate (grid_to_block $0) west 1) true))
(lambda (to_min_grid (duplicate (grid_to_block $0) east 1) true))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (duplicate (grid_to_block $0) west 1))))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (box_block (grid_to_block $0)) west 1)))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (duplicate (grid_to_block $0) east 1))))
(lambda (#(lambda (to_min_grid $0 true)) (duplicate (box_block (grid_to_block $0)) east 1)))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 blue black))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (replace_color (grid_to_block $0) blue black))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (remove_black_b (grid_to_block $0)) blue black)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (replace_color (grid_to_block $0) blue black))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (box_block (grid_to_block $0)) blue black)))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) pink red)))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 pink red))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) false))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) pink red) true))
(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) pink red) true))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (replace_color (grid_to_block $0) pink red))))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (remove_black_b (grid_to_block $0)) pink red)))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (replace_color (grid_to_block $0) pink red))))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (box_block (grid_to_block $0)) pink red)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (grid_to_block $0) yellow black))))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (remove_black_b (replace_color (#(lambda (reflect (grid_to_block $0) true)) $0) yellow black))))
(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
(lambda (#(lambda (to_min_grid $0 true)) (grow (grid_to_block $0) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
(lambda (to_min_grid (grow (grid_to_block $0) 1) false))
(lambda (to_min_grid (grow (grid_to_block $0) 1) true))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid $0 true)) (grow (box_block (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (box_block (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (grid_to_block $0) orange grey)))
(lambda (#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0))))) $0 orange grey))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) false))
(lambda (to_original_grid_overlay (replace_color (grid_to_block $0) orange grey) true))
(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) false))
(lambda (to_min_grid (replace_color (grid_to_block $0) orange grey) true))
(lambda (#(lambda (to_min_grid $0 true)) (remove_black_b (replace_color (grid_to_block $0) orange grey))))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (remove_black_b (grid_to_block $0)) orange grey)))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (replace_color (grid_to_block $0) orange grey))))
(lambda (#(lambda (to_min_grid $0 true)) (replace_color (box_block (grid_to_block $0)) orange grey)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $0) (lambda (get_num_tiles $0)) 1)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $1) (lambda (get_num_tiles $0)) $0)))) $0 1))
(lambda (#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true)))) $0 lor))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 true)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_any_boundary (grid_to_block $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0)))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) west))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) east))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (grid_to_block $0) north))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) south))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor green (split_grid $0 (touches_boundary (#(lambda (reflect (grid_to_block $0) true)) $0) west))))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 2) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 3) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 4) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 5) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 6) true))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 7) false))
(lambda (to_original_grid_overlay (duplicate (remove_black_b (grid_to_block $0)) south 8) false))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
(lambda (#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false))) (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black)))
(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
(lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) true))
(lambda (#(lambda (to_min_grid $0 true)) (fill_color (remove_black_b (merge_blocks (to_blocks (split_grid $0 false)))) black)))
(lambda (#(lambda (to_min_grid $0 true)) (box_block (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black))))
(lambda (to_original_grid_overlay (fill_snakewise (merge_blocks (to_blocks (split_grid $0 false))) (color_pair black black)) true))
(lambda (to_original_grid_overlay (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (fill_color (remove_black_b (merge_blocks (to_blocks (split_grid $0 false)))) black) true))
(lambda (to_min_grid (fill_color (merge_blocks (to_blocks (split_grid $0 false))) black) (touches_any_boundary (grid_to_block $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (find_tiles_by_black_b $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (find_tiles_by_black_b $0))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (map_tiles (lambda $0) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (map_tiles (lambda $0) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (find_blocks_by_black_b $0 false false)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (find_blocks_by_black_b $0 false true)))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (filter_tiles (lambda true) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (filter_tiles (lambda true) (find_tiles_by_black_b $0)))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 0 (tiles_to_blocks (map_tiles (lambda $0) (map_tiles (lambda $0) (find_tiles_by_black_b $0))))))
(lambda (#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1)))) 6 (tiles_to_blocks (map_tiles (lambda $0) (map_tiles (lambda $0) (find_tiles_by_black_b $0))))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 false)))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (grid_to_block $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (grid_to_block $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (grid_to_block $0) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (#(lambda (reflect (grid_to_block $0) true)) $0) false))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_interior (block_to_tile (#(lambda (reflect (grid_to_block $0) true)) $0)) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor pink (split_grid $0 (is_symmetrical (#(lambda (reflect (grid_to_block $0) true)) $0) true))))
(lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) lor (nth_primary_color (grid_to_block $0) 6) (split_grid $0 false)))
(lambda (#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1))) $0))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (remove_black_b (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (remove_black_b (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (box_block (grow (grid_to_block $0) 1))))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (box_block (grid_to_block $0)) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grow (grid_to_block $0) 1)) south)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (extend_towards_until_edge (block_to_tile (grid_to_block $0)) south) 1)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (extend_towards_until_edge (block_to_tile (grow (grid_to_block $0) 1)) west)))
(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (extend_towards_until_edge (block_to_tile (grid_to_block $0)) west) 1)))
(lambda (#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true)) $0))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
(lambda (#(lambda (to_min_grid $0 true)) (extend_towards_until_edge (block_to_tile (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) south)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (grid_to_block $0))))
(lambda (to_original_grid_overlay (remove_black_b (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (box_block (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (box_block (#(lambda (reflect (grid_to_block $0) true)) $0))) true))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_any_boundary (#(lambda (reflect (grid_to_block $0) true)) $0))))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) south)))
(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) (touches_boundary (grid_to_block $0) west)))
Finished consolidation.
Induced a grammar in 140.2 seconds
Grammar after iteration 3:
0.000000	t0	$_
0.000000	tgridin -> bool -> list(tsplitblock)	split_grid
0.000000	tcolor -> tcolor -> list(tcolor)	color_pair
-0.005580	tblock -> ttile	block_to_tile
-0.006514	tgridin -> list(ttile)	find_tiles_by_black_b
-0.032673	(ttile -> ttile) -> list(ttile) -> list(ttile)	map_tiles
-0.037203	(ttile -> bool) -> list(ttile) -> list(ttile)	filter_tiles
-0.088545	tdirection	south
-0.089612	tlogical	lor
-0.089612	tlogical	lxor
-0.121361	tlogical	land
-0.123063	bool	false
-0.138490	tgridin -> bool -> bool -> list(tblock)	find_blocks_by_black_b
-0.139195	list(tsplitblock) -> list(tblock)	to_blocks
-0.141324	list(ttile) -> list(tblock)	tiles_to_blocks
-0.170257	tgridin -> bool -> bool -> list(tblock)	find_same_color_blocks
-0.172679	(tblock -> bool) -> list(tblock) -> list(tblock)	filter_blocks
-0.173113	(tblock -> tblock) -> list(tblock) -> list(tblock)	map_blocks
-0.173113	tgridin -> tcolor -> bool -> bool -> list(tblock)	find_blocks_by_color
-0.180920	tdirection	west
-0.180935	tdirection	east
-0.180935	tdirection	north
-0.186026	int	1
-0.227215	bool	true
-0.253565	int	0
-0.266062	int	2
-0.281045	tcolor	black
-0.297481	int	3
-0.304797	tblock -> bool -> bool	is_rectangle
-0.313746	int	6
-0.329274	tblock -> bool	touches_any_boundary
-0.333608	int	4
-0.333608	int	5
-0.333608	int	7
-0.333608	int	8
-0.335424	ttile -> bool -> bool	is_interior
-0.335946	tblock -> bool -> bool	is_symmetrical
-0.336972	tblock -> int	get_num_tiles
-0.336976	tblock -> int	get_height
-0.336976	tblock -> int	get_width
-0.336976	tblock -> int	get_original_grid_height
-0.336976	tblock -> int	get_original_grid_width
-0.336976	int	9
-0.337482	tblock -> tdirection -> bool	touches_boundary
-0.337583	tblock -> int -> bool	has_min_tiles
-0.341317	tblock -> int -> tcolor	nth_primary_color
-0.341950	tcolor	pink
-0.342096	tcolor	red
-0.373536	tcolor	blue
-0.373536	tcolor	yellow
-0.373536	tcolor	grey
-0.373536	tcolor	orange
-0.379758	tgridin -> tblock	grid_to_block
-0.405168	tcolor	green
-0.406326	tcolor -> tcolor -> tcolor -> tlogical -> tcolor	color_logical
-0.406326	tcolor	invisible
-0.406326	tcolor	teal
-0.406326	tcolor	maroon
-0.571172	tblock -> tblock	remove_black_b
-0.583350	list(tblock) -> tblock	merge_blocks
-0.603659	tblock -> int -> tdirection -> bool -> tblock	move
-0.603667	tblock -> tdirection -> int -> tblock	duplicate
-0.603793	tblock -> tcolor -> tblock	fill_color
-0.634773	tblock -> tcolor -> tcolor -> tblock	replace_color
-0.635234	tblock -> int -> tblock	grow
-0.648999	tblock -> tblock	box_block
-0.661353	ttile -> tdirection -> tblock	extend_towards_until_edge
-0.665319	tblock -> bool -> tblock	reflect
-0.668072	tblock -> list(tcolor) -> tblock	fill_snakewise
-0.668202	list(tblock) -> (tblock -> int) -> int -> tblock	nth_of_sorted_object_list
-0.668206	ttile -> tdirection -> (tblock -> bool) -> tblock	extend_towards_until
-0.721338	tblock -> bool -> tgridout	to_original_grid_overlay
-0.755668	list(tsplitblock) -> (tcolor -> tcolor -> tcolor) -> tgridout	overlap_split_blocks
-0.776473	tblock -> bool -> tgridout	to_min_grid
-0.092754	tgridin -> list(tblock)	#(lambda (find_same_color_blocks $0 false true))
-0.546677	tgridin -> tblock	#(lambda (reflect (grid_to_block $0) true))
-0.614462	tblock -> tgridout	#(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false)))
-0.663881	tgridin -> tcolor -> tcolor -> tgridout	#(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0)))))
-0.693145	int -> list(tblock) -> tgridout	#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1))))
-0.693155	tgridin -> tdirection -> tgridout	#(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true))))
-0.694201	tgridin -> tlogical -> tgridout	#(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true))))
-0.697987	tgridin -> tgridout	#(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))
-0.700999	tblock -> tgridout	#(lambda (to_min_grid (remove_black_b $0) false))
-0.714787	tblock -> tgridout	#(lambda (to_min_grid $0 true))
-0.722833	tlogical -> tcolor -> list(tsplitblock) -> tgridout	#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4)))))))
-0.723926	tgridin -> int -> tgridout	#(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $1) (lambda (get_num_tiles $0)) $0))))
-0.723971	tgridin -> tgridout	#(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))
Currently using this much memory: 250523648
Exported checkpoint to experimentOutputs/list/2020-03-29T13:24:55.783873/list_aic=1.0_arity=3_ET=28800_it=3_MF=10_noConsolidation=False_pc=30.0_RW=False_solver=ocaml_STM=True_L=1.0_TRR=unsolved_K=2_topkNotMAP=False_rec=False.pickle
WARNING: Do not have an English description of:
 #(lambda (to_min_grid $0 true))

WARNING: Do not have an English description of:
 #(lambda (to_min_grid (remove_black_b $0) false))

WARNING: Do not have an English description of:
 #(lambda (reflect (grid_to_block $0) true))

WARNING: Do not have an English description of:
 #(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4)))))))

WARNING: Do not have an English description of:
 #(lambda (find_same_color_blocks $0 false true))

WARNING: Do not have an English description of:
 #(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list $0 (lambda 1) $1))))

WARNING: Do not have an English description of:
 #(lambda (to_original_grid_overlay (remove_black_b (#(lambda (reflect (grid_to_block $0) true)) $0)) true))

WARNING: Do not have an English description of:
 #(lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (grow (grid_to_block $0) 1)))

WARNING: Do not have an English description of:
 #(lambda (lambda (#(lambda (to_min_grid $0 true)) (nth_of_sorted_object_list (#(lambda (find_same_color_blocks $0 false true)) $1) (lambda (get_num_tiles $0)) $0))))

WARNING: Do not have an English description of:
 #(lambda (#(lambda (to_min_grid $0 true)) (reflect $0 false)))

WARNING: Do not have an English description of:
 #(lambda (lambda (#(lambda (to_min_grid $0 true)) (move (#(lambda (reflect (grid_to_block $0) true)) $1) 3 $0 true))))

WARNING: Do not have an English description of:
 #(lambda (lambda (#(lambda (lambda (lambda (overlap_split_blocks $0 (lambda (lambda (color_logical $0 $1 $3 $4))))))) $0 green (split_grid $1 true))))

WARNING: Do not have an English description of:
 #(lambda (lambda (lambda (#(lambda (to_min_grid (remove_black_b $0) false)) (replace_color (grid_to_block $2) $1 $0)))))

Exporting primitive graph to experimentOutputs/list/2020-03-29T13:24:55.783873/list_primitives_2_depth.pdf
Exported primitive graph to experimentOutputs/list/2020-03-29T13:24:55.783873/list_primitives_2_unordered.pdf
